package ec.com.propietarios.restController;


import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.StringTokenizer;

import javax.imageio.ImageIO;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.RandomStringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StopWatch;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import ec.com.propietarios.model.TipoDocumento;
import ec.com.propietarios.modelRest.OrderProduct;
import ec.com.propietarios.model.TipoPago;
import ec.com.propietarios.model.Contactos;
import ec.com.propietarios.modelRest.CreateOwner;
import ec.com.propietarios.modelRest.CreateAbono;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;








import com.google.gson.Gson;

import ec.com.propietarios.model.Abonos;
import ec.com.propietarios.model.AbonosRepository;
import ec.com.propietarios.model.AccionesTarjeta;
import ec.com.propietarios.model.AccionesTarjetaRepository;
import ec.com.propietarios.model.Auditoria;
import ec.com.propietarios.model.AuditoriaRepository;
import ec.com.propietarios.model.CasosEspeciales;
import ec.com.propietarios.model.CasosEspecialesRepository;
import ec.com.propietarios.model.CobranzasRepository;
import ec.com.propietarios.model.Comentarios;
import ec.com.propietarios.model.ComentariosRepository;
import ec.com.propietarios.model.ComprobantesPago;
import ec.com.propietarios.model.ComprobantesPagoRepository;
import ec.com.propietarios.model.Convenio;
import ec.com.propietarios.model.ConvenioRepository;
import ec.com.propietarios.model.DetalleDocumento;
import ec.com.propietarios.model.DetalleDocumentoPK;
import ec.com.propietarios.model.DocumentoVenta;
import ec.com.propietarios.model.DocumentoVentaRepository;
import ec.com.propietarios.model.GrupoDetalle;
import ec.com.propietarios.model.GrupoDocumento;
import ec.com.propietarios.model.GrupoDocumentoRepository;
import ec.com.propietarios.model.HistorialPropietario;
import ec.com.propietarios.model.HistorialPropietarioRepository;
import ec.com.propietarios.model.Localidad;
import ec.com.propietarios.model.LocalidadRepository;
import ec.com.propietarios.model.Ordernes;
import ec.com.propietarios.model.OrdernesRepository;
import ec.com.propietarios.model.Pago;
import ec.com.propietarios.model.PagoRepository;
import ec.com.propietarios.model.Parametros;
import ec.com.propietarios.model.ParametrosRepository;
import ec.com.propietarios.model.Propietario;
import ec.com.propietarios.model.PropietarioCabecera;
import ec.com.propietarios.model.PropietarioCabeceraRepository;
import ec.com.propietarios.model.PropietarioRepository;
import ec.com.propietarios.model.Publicidad;
import ec.com.propietarios.model.PublicidadRepository;
import ec.com.propietarios.model.Solicitudes;
import ec.com.propietarios.model.SolicitudesRepository;
import ec.com.propietarios.model.Suscripcion;
import ec.com.propietarios.model.SuscripcionRepository;
import ec.com.propietarios.model.Tarjetas;
import ec.com.propietarios.model.TarjetasRepository;
import ec.com.propietarios.model.TipoDocumentoRepository;
import ec.com.propietarios.model.TipoPagoRepository;
import ec.com.propietarios.model.TipoSuscripcion;
import ec.com.propietarios.model.TipoSuscripcionRepository;
import ec.com.propietarios.model.Usuario;
import ec.com.propietarios.model.UsuarioRepository;
import ec.com.propietarios.modelRest.Adverstising;
import ec.com.propietarios.modelRest.Butacas;
import ec.com.propietarios.modelRest.Comentario;
import ec.com.propietarios.modelRest.Contacto;
import ec.com.propietarios.modelRest.ConvenioCab;
import ec.com.propietarios.modelRest.CreateVoucher;
import ec.com.propietarios.modelRest.Detalle;
import ec.com.propietarios.modelRest.DetalleGroup;
import ec.com.propietarios.modelRest.Deuda;
import ec.com.propietarios.modelRest.DeudaCab;
import ec.com.propietarios.modelRest.DeudaSuscripcion;
import ec.com.propietarios.modelRest.Distinct;
import ec.com.propietarios.modelRest.Documents;
import ec.com.propietarios.modelRest.DocumentsGroup;
import ec.com.propietarios.modelRest.DocumentsOwner;
import ec.com.propietarios.modelRest.GetOwner;
import ec.com.propietarios.modelRest.GetOwnerCab;
import ec.com.propietarios.modelRest.Info;
import ec.com.propietarios.modelRest.Info2;
import ec.com.propietarios.modelRest.Item;
import ec.com.propietarios.modelRest.Item2;
import ec.com.propietarios.modelRest.ListId;
import ec.com.propietarios.modelRest.LocalidadCab;
import ec.com.propietarios.modelRest.LocalidadDividida;
import ec.com.propietarios.modelRest.ObjectAsync2;
import ec.com.propietarios.modelRest.OrderPageQuery;
import ec.com.propietarios.modelRest.PageAuditoria;
import ec.com.propietarios.modelRest.PageCab;
import ec.com.propietarios.modelRest.PageCard;
import ec.com.propietarios.modelRest.PageCase;
import ec.com.propietarios.modelRest.PageQuery;
import ec.com.propietarios.modelRest.Pages;
import ec.com.propietarios.modelRest.PagesAuditoria;
import ec.com.propietarios.modelRest.PagesCab;
import ec.com.propietarios.modelRest.PagesCase;
import ec.com.propietarios.modelRest.PagesDocuments;
import ec.com.propietarios.modelRest.PagesCard;
import ec.com.propietarios.modelRest.PagesDocumentsOwner;
import ec.com.propietarios.modelRest.PagesPublicidad;
import ec.com.propietarios.modelRest.PagesPublicidad2;
import ec.com.propietarios.modelRest.PagesSolicitudes;
import ec.com.propietarios.modelRest.PagesSolicitudes2;
import ec.com.propietarios.modelRest.PagesVoucher;
import ec.com.propietarios.modelRest.Product;
import ec.com.propietarios.modelRest.PropietarioDividido;
import ec.com.propietarios.modelRest.ResponseAdverstising;
import ec.com.propietarios.modelRest.ResponseButacas;
import ec.com.propietarios.modelRest.ResponseCase;
import ec.com.propietarios.modelRest.ResponseConvenioCab;
import ec.com.propietarios.modelRest.ResponseDeuda;
import ec.com.propietarios.modelRest.ResponseDeudaCab;
import ec.com.propietarios.modelRest.ResponseDocument;
import ec.com.propietarios.modelRest.ResponseDocumentGroup;
import ec.com.propietarios.modelRest.ResponseGeneric;
import ec.com.propietarios.modelRest.ResponseLocalidad;
import ec.com.propietarios.modelRest.ResponseLocalidadCab;
import ec.com.propietarios.modelRest.ResponseLocalidadDividida;
import ec.com.propietarios.modelRest.ResponseName;
import ec.com.propietarios.modelRest.ResponseOwner;
import ec.com.propietarios.modelRest.ResponseOwnerCab;
import ec.com.propietarios.modelRest.ResponsePaymentType;
import ec.com.propietarios.modelRest.ResponseSuscriptionOwner;
import ec.com.propietarios.modelRest.ResponseSuscriptions;
import ec.com.propietarios.modelRest.ResponseVoucher;
import ec.com.propietarios.modelRest.Solicitud;
import ec.com.propietarios.modelRest.Solicitud2;
import ec.com.propietarios.modelRest.SuscripcionDividida;
import ec.com.propietarios.modelRest.SuscriptionsOwner;
import ec.com.propietarios.modelRest.UpdateImage;
import ec.com.propietarios.modelRest.Voucher;
import ec.com.propietarios.utility.UtilityManager;
import ec.com.propietarios.modelRest.UpdateOwner;
import ec.com.propietarios.modelRest.CreateConvenio;
import ec.com.propietarios.modelRest.ResponseInfo;
import ec.com.propietarios.modelRest.ChangeOwner;
import ec.com.propietarios.modelRest.AssignLocalidad;
import ec.com.propietarios.modelRest.RemoveAbono;
import ec.com.propietarios.modelRest.CreateCase;
import ec.com.propietarios.modelRest.UpdateCase;
import ec.com.propietarios.modelRest.GetCase;
import ec.com.propietarios.modelRest.CreateComment;
import ec.com.propietarios.modelRest.UpdateComment;
import ec.com.propietarios.modelRest.CreateCard;
import ec.com.propietarios.modelRest.UpdateCard;
import ec.com.propietarios.modelRest.CreateRequest;
import ec.com.propietarios.modelRest.UpdateRequest;

@RestController
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-02T14:50:01.213-05:00")
@RequestMapping("/owner")
public class RestApiController {
	private static final Logger logger = LogManager.getLogger(RestApiController.class);
	
	@Autowired
	private PropietarioRepository propietarioRepository;
	
	@Autowired
	private SuscripcionRepository suscripcionRepository;
	
	@Autowired
	private DocumentoVentaRepository documentoVentaRepository;
	
	@Autowired
	private LocalidadRepository localidadRepository;
	
	@Autowired
	private TipoSuscripcionRepository tipoSuscripcionRepository;
	
	@Autowired
	private AbonosRepository abonosRepository;
	
	@Autowired
	private PagoRepository pagoRepository;
	
	@Autowired
	private TipoPagoRepository tipoPagoRepository;
	
	@Autowired
	private OrdernesRepository ordenesRepository;
	
	@Autowired
	private GrupoDocumentoRepository grupoDocumentoRepository;
	
	@Autowired
	private PropietarioCabeceraRepository propietarioCabeceraRepository;
	
	@Autowired
	private HistorialPropietarioRepository historialPropietarioRepository;
	
	@Autowired
	private TipoDocumentoRepository tipoDocumentoRepository;
	
	@Autowired
	private ParametrosRepository parametrosRepository;
	
	@Autowired
	private ConvenioRepository convenioRepository;
	
	@Autowired
	private UsuarioRepository usuarioRepository;
	
	@Autowired
	private AuditoriaRepository auditoriaRepository;
	
	@Autowired
	private CasosEspecialesRepository casosEspecialesRepository;
	
	@Autowired
	private ComentariosRepository comentariosRepository;
	
	@Autowired
	private TarjetasRepository tarjetasRepository;
	
	@Autowired
	private SolicitudesRepository solicitudesRepository;
	
	@Autowired
	private CobranzasRepository cobranzasRepository;
	
	@Autowired
	private ComprobantesPagoRepository comprobantesPagoRepository;
	
	@Autowired
	private AccionesTarjetaRepository accionesTarjetaRepository;
	
	@Autowired
	private PublicidadRepository publicidadRepository;
	
	
	private static DecimalFormat df2 = new DecimalFormat("#.##");
	
	private UtilityManager utility = new UtilityManager();
	
	
	public static final int ID_LENGTH = 10;
	
	public String generateUniqueId() {

		return RandomStringUtils.randomAlphanumeric(ID_LENGTH);

	}
	
	@Transactional
	@PostMapping(path = "/getOwners", consumes = "application/json", produces = "application/json")
	public Pages GetOwners(@RequestBody PageQuery obj) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio getOwners");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		Pages paginas = new Pages();
		List<ec.com.propietarios.modelRest.Page> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderDetail(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<Propietario> pagesTotal;
    		if(obj.getSearch().getValue().equals("")){
    			pagesTotal = propietarioRepository.findAll(pageConfig);
    		}else{
    			pagesTotal = utility.listaPaginas(obj.getSearch(), pageConfig, propietarioRepository, localidadRepository);
    		}
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (Propietario propietario : pagesTotal.getContent()) {
				ec.com.propietarios.modelRest.Page pageRest = new ec.com.propietarios.modelRest.Page();
				pageRest.setId(propietario.getId());
				pageRest.setNombre(propietario.getNombre());
				pageRest.setDireccion(propietario.getDireccion());
				pageRest.setCorreo(propietario.getCorreo());
				pageRest.setTelefono(propietario.getTelefono());
				pageRest.setIdentificacion(propietario.getIdentificacion());
				pageRest.setTipoIdentificacion(propietario.getTipoidentificacion().toString());
				pageRest.setMovil(propietario.getMovil());
				pageRest.setSuscripcion(propietario.getSuscripcion().getNombre());
				pageRest.setIdSuscripcion(propietario.getSuscripcion().getId());
				pageRest.setEstado(propietario.getEstado().toString());
				
				List<Localidad> localidades = localidadRepository.findByPropietarioAndSuscripcion(propietario.getId(), propietario.getSuscripcion());
				if(localidades.size() > 0){
					StringBuilder str = new StringBuilder();
					for(Localidad localidad: localidades){
						str.append(localidad.getCodigo());
						str.append(", ");
					}
					String local = str.toString();
					local = local.substring(0, str.length() - 2);
					pageRest.setLocalidad(local);
				}
				/*if(propietario.getContactosCollection() != null){
					List<Contacto> listContactos = new ArrayList<>();
					for (Contactos contactos : propietario.getContactosCollection()) {
						Contacto contacto = new Contacto();
						contacto.setId(contactos.getId());
						contacto.setNombre(contactos.getNombre());
						contacto.setDireccion(contactos.getDireccion());
						contacto.setCorreo(contactos.getCorreo());
						contacto.setTelefono(contactos.getTelefono());
						contacto.setIdentificacion(contactos.getIdentificacion());
						contacto.setTipoIdentificacion(contactos.getTipoidentificacion().toString());
						contacto.setMovil(contactos.getMovil());
						contacto.setEstado(contactos.getEstado().toString());
						if(!contactos.getPropietarioCollection().isEmpty()){
							List<Propietario> propietarios = (List<Propietario>) contactos.getPropietarioCollection();
							contacto.setPropietario(propietarios.get(0).getNombre());
							contacto.setIdPropietario(propietarios.get(0).getId());
						}else{
							contacto.setPropietario("");
						}
						contacto.setTipoContacto(contactos.getTipo().getNombre());
						contacto.setIdTipoContacto(contactos.getTipo().getId());
						listContactos.add(contacto);
					}
					pageRest.setContactos(listContactos);
				}*/
				
				/*if(propietario.getDocumentoVentaCollection() != null){
					List<Documents> listDocumentos = new ArrayList<>();
					
					for(DocumentoVenta documentos : propietario.getDocumentoVentaCollection()){
						Documents documento = new Documents();
						documento.setId(documentos.getId());
						documento.setCorreo(documentos.getCorreo());
						documento.setDescuento(documentos.getDescuento());
						documento.setDireccion(documentos.getDireccion());
						documento.setEstado(documentos.getEstado());
						documento.setFechacreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
						documento.setFechavencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
						documento.setIdpropietario(documentos.getIdpropietario().getId());
						documento.setLocalidad(documentos.getLocalidad());
						documento.setNombreropietario(documentos.getIdpropietario().getNombre());
						documento.setNumero(documentos.getNumero());
						documento.setReferencia(documentos.getReferencia());
						documento.setSaldo(documentos.getSaldo());
						documento.setSecuencia(documentos.getSecuencia());
						documento.setSubtotalconiva(documentos.getSubtotalconiva());
						documento.setSubtotalsiniva(documentos.getSubtotalsiniva());
						documento.setSucursal(documentos.getSucursal());
						documento.setTelefono(documentos.getTelefono());
						documento.setTipodocumento(documentos.getTipodocumento().getNombre());
						documento.setTipoidentificacion(documentos.getTipoidentificacion());
						List<Detalle> listDetalles = new ArrayList<>();
						for(DetalleDocumento detalles: documentos.getDetalleDocumentoCollection()){
							Detalle detalle = new Detalle();
							detalle.setId(detalles.getDetalleDocumentoPK().getId());
							detalle.setCantidad(detalles.getCantidad());
							detalle.setDescuento(detalles.getDescuento());
							detalle.setLinea(detalles.getDetalleDocumentoPK().getLinea());
							detalle.setPorcentajeiva(detalles.getPorcentajeiva());
							detalle.setProducto(detalles.getProducto());
							detalle.setSubtotal(new Double(df2.format((detalles.getPreciounitario() + detalles.getValoriva() - detalles.getDescuento()) * detalles.getCantidad())));
							detalle.setValoriva(detalles.getValoriva());
							listDetalles.add(detalle);
						}
						if(listDetalles != null){
							documento.setDetalle(listDetalles);
						}
						listDocumentos.add(documento);
					}
					
					pageRest.setDocumentos(listDocumentos);
				}*/
				
				
				data.add(pageRest);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error GetOwner {}", e);
			message = "Error al consultar los propietarios";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@PostMapping(path = "/getAllDocuments", consumes = "application/json", produces = "application/json")
	public PagesDocuments GetAllDocuments(@RequestBody PageQuery obj) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetAllDocuments");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesDocuments paginas = new PagesDocuments();
		List<Documents> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderDocument(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		//Page<DocumentoVenta> pagesTotal = documentoVentaRepository.findByIdpropietario_Id(id, pageConfig);
    		Page<DocumentoVenta> pagesTotal;
    		if(obj.getSearch().getValue().equals("")){
    			pagesTotal = documentoVentaRepository.findAll(pageConfig);
    		}else{
    			pagesTotal = utility.listaPaginasDocument(obj.getSearch(), pageConfig, documentoVentaRepository);
    		}
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (DocumentoVenta documentos : pagesTotal.getContent()) {
				Documents documento = new Documents();
				documento.setId(documentos.getId());
				documento.setCorreo(documentos.getCorreo());
				documento.setDescuento(documentos.getDescuento());
				documento.setDireccion(documentos.getDireccion());
				documento.setEstado(documentos.getEstado());
				documento.setFechacreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
				documento.setFechavencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
				documento.setIdpropietario(documentos.getIdpropietario().getId());
				documento.setLocalidad(documentos.getLocalidad());
				documento.setNombreropietario(documentos.getIdpropietario().getNombre());
				documento.setNumero(documentos.getNumero());
				documento.setReferencia(documentos.getReferencia());
				documento.setSaldo(new Double(df2.format(documentos.getSaldo())));
				documento.setSecuencia(documentos.getSecuencia());
				documento.setSubtotalconiva(documentos.getSubtotalconiva());
				documento.setSubtotalsiniva(documentos.getSubtotalsiniva());
				documento.setSucursal(documentos.getSucursal());
				documento.setTelefono(documentos.getTelefono());
				documento.setTipodocumento(documentos.getTipodocumento().getNombre());
				documento.setTipoidentificacion(documentos.getTipoidentificacion());
				List<Detalle> listDetalles = new ArrayList<>();
				for(DetalleDocumento detalles: documentos.getDetalleDocumentoCollection()){
					Detalle detalle = new Detalle();
					detalle.setId(detalles.getDetalleDocumentoPK().getId());
					detalle.setCantidad(detalles.getCantidad());
					detalle.setDescuento(detalles.getDescuento());
					detalle.setLinea(detalles.getDetalleDocumentoPK().getLinea());
					detalle.setPorcentajeiva(detalles.getPorcentajeiva());
					detalle.setProducto(detalles.getProducto());
					detalle.setSubtotal(new Double(df2.format((detalles.getPreciounitario() + detalles.getValoriva() - detalles.getDescuento()) * detalles.getCantidad())));
					detalle.setValoriva(detalles.getValoriva());
					listDetalles.add(detalle);
				}
				if(listDetalles != null){
					documento.setDetalle(listDetalles);
				}
				if(documentos.getEstado().equals('P')){
					List<Pago> pagos = pagoRepository.findByIddocumento_id(documentos.getId());
					if(pagos.isEmpty()){
						Ordernes orden = ordenesRepository.findByFacturas(documentos.getReferencia());
						if(orden != null){
							if(orden.getFacturasPagosFechaDePago() != null){
								documento.setFechaPago(orden.getFacturasPagosFechaDePago().replace('/', '-'));
							}else{
								documento.setFechaPago("");
							}
							
						}else{
							documento.setFechaPago("");
						}
					}else{
						for(Pago pago: pagos){
							documento.setFechaPago(new SimpleDateFormat("dd-MM-yyyy").format(pago.getFechapago()));
						}
					}
				}
				data.add(documento);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error GetOwner {}", e);
			message = "Error al consultar los documentos";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}

	
	@Transactional
	@GetMapping(path = "/getOwnerById/{id}", produces = "application/json")
	public ResponseEntity<String> GetOwnerById(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetOwnerById");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		GetOwner pageRest = new GetOwner();
		ResponseOwner response = new ResponseOwner();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			Propietario propietario = propietarioRepository.findOne(id);
			if(propietario == null){
				status = "WARNING";
    			message = "Propietario No Existe ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseOwner(status, message, response, HttpStatus.OK.value(), null)), HttpStatus.OK);
			}

			pageRest.setId(propietario.getId());
			pageRest.setNombre(propietario.getNombre());
			pageRest.setDireccion(propietario.getDireccion());
			pageRest.setCorreo(propietario.getCorreo());
			pageRest.setTelefono(propietario.getTelefono());
			pageRest.setIdentificacion(propietario.getIdentificacion());
			pageRest.setTipoIdentificacion(propietario.getTipoidentificacion().toString());
			pageRest.setMovil(propietario.getMovil());
			pageRest.setSuscripcion(propietario.getSuscripcion().getNombre());
			pageRest.setIdSuscripcion(propietario.getSuscripcion().getId());
			pageRest.setEstado(propietario.getEstado().toString());
			
			List<Localidad> localidades = localidadRepository.findByPropietarioAndSuscripcion(propietario.getId(), propietario.getSuscripcion());
			if(localidades.size() > 0){
				StringBuilder str = new StringBuilder();
				for(Localidad localidad: localidades){
					str.append(localidad.getCodigo());
					str.append(", ");
				}
				String local = str.toString();
				local = local.substring(0, str.length() - 2);
				pageRest.setLocalidad(local);
			}
			
			response = utility.SetResponseOwner(status, message, response, HttpStatus.OK.value(), pageRest);
			logger.error(message);
		}catch(Exception e){
			logger.error("Error GetOwnerById {}", e);
			message = "Error al consultar los propietarios";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getDocumentById/{id}", produces = "application/json")
	public ResponseEntity<String> GetDocumentById(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetDocumentById");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		Documents documento = new Documents();
		ResponseDocument response = new ResponseDocument();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			DocumentoVenta documentos = documentoVentaRepository.findOne(id);
			if(documentos == null){
				status = "WARNING";
    			message = "Documento No Existe ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseDocument(status, message, response, HttpStatus.OK.value(), null)), HttpStatus.OK);
			}

			documento.setId(documentos.getId());
			documento.setCorreo(documentos.getCorreo());
			documento.setDescuento(documentos.getDescuento());
			documento.setDireccion(documentos.getDireccion());
			documento.setEstado(documentos.getEstado());
			documento.setFechacreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
			documento.setFechavencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
			documento.setIdpropietario(documentos.getIdpropietario().getId());
			documento.setLocalidad(documentos.getLocalidad());
			documento.setNombreropietario(documentos.getIdpropietario().getNombre());
			documento.setNumero(documentos.getNumero());
			documento.setReferencia(documentos.getReferencia());
			List<Abonos> abonoList = abonosRepository.findByEstadoAndIdcabecera_id('A', documentos.getIdpropietario().getPropietariocabecera().getId());
			if(!abonoList.isEmpty()){
    			Double total = new Double(0);
    			for(Abonos abono: abonoList){
    				total = new Double(df2.format(total + abono.getAbono()));
    			}
    			documento.setSaldoFavor(total);
    		}else{
    			documento.setSaldoFavor(new Double(0));
    		}
			
			List<Pago> pagos = pagoRepository.findByIddocumento_id(documentos.getId());
			if(pagos.isEmpty()){
				documento.setTotalPagado(new Double(0));
				//documento.setSaldo(documentos.getSaldo());
			}else{
				List<String> pagoList = new ArrayList<>();
				List<String> fechasList = new ArrayList<>();
				Double suma= new Double(0);
				String observacion = "N/A";
				for(Pago pago: pagos){
					fechasList.add(new SimpleDateFormat("dd-MM-yyyy").format(pago.getFechapago()));
					documento.setFechaPago(new SimpleDateFormat("dd-MM-yyyy").format(pago.getFechapago()));
					if(pago.getValortotal() == 0){
						suma = new Double(df2.format(suma + new Double(pago.getObservacion())));
						observacion = pago.getObservacion2();
					}else{
						suma = new Double(df2.format(suma + pago.getValortotal()));
						observacion = pago.getObservacion();
					}
					
					Abonos abonoPago = abonosRepository.findByPago(documentos.getIdpropietario().getPropietariocabecera().getId(), pago.getId());
					if(abonoPago!=null){
						suma = new Double(df2.format(suma + abonoPago.getAniadido()));
					}
					pagoList.add(pago.getIdtipopago().getDescripcion() + " - " + observacion);
					
				}
				documento.setFechasPago(fechasList);
				documento.setTotalPagado(new Double(df2.format(suma)));
				documento.setTipoPago(pagoList);
				//documento.setSaldo(documentos.getSaldo() - pago.getValortotal());
			}
			documento.setSaldo(new Double(df2.format(documentos.getSaldo())));
			documento.setSecuencia(documentos.getSecuencia());
			documento.setSubtotalconiva(documentos.getSubtotalconiva());
			documento.setSubtotalsiniva(documentos.getSubtotalsiniva());
			documento.setSucursal(documentos.getSucursal());
			documento.setTelefono(documentos.getTelefono());
			documento.setTipodocumento(documentos.getTipodocumento().getNombre());
			documento.setTipoidentificacion(documentos.getTipoidentificacion());
			List<Detalle> listDetalles = new ArrayList<>();
			for(DetalleDocumento detalles: documentos.getDetalleDocumentoCollection()){
				Detalle detalle = new Detalle();
				detalle.setId(detalles.getDetalleDocumentoPK().getId());
				detalle.setCantidad(detalles.getCantidad());
				detalle.setPrecioUnitario(detalles.getPreciounitario());
				detalle.setDescuento(detalles.getDescuento());
				detalle.setLinea(detalles.getDetalleDocumentoPK().getLinea());
				detalle.setPorcentajeiva(detalles.getPorcentajeiva());
				detalle.setProducto(detalles.getProducto());
				detalle.setSubtotal(new Double(df2.format((detalles.getPreciounitario()) * detalles.getCantidad())));
				detalle.setValoriva(detalles.getValoriva());
				listDetalles.add(detalle);
			}
			if(listDetalles != null){
				documento.setDetalle(listDetalles);
			}
			
			
			response = utility.SetResponseDocument(status, message, response, HttpStatus.OK.value(), documento);
			logger.error(message);
		}catch(Exception e){
			logger.error("Error GetDocumentById {}", e);
			message = "Error al consultar el documento";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PostMapping(path = "/getDocumentsByOwner/{id}", consumes = "application/json", produces = "application/json")
	public PagesDocuments GetDocumentsByOwner(@RequestBody PageQuery obj, @PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetDocumentsByOwner");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesDocuments paginas = new PagesDocuments();
		List<Documents> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderDocument(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<DocumentoVenta> pagesTotal = documentoVentaRepository.findByIdpropietario_Id(id, pageConfig);
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (DocumentoVenta documentos : pagesTotal.getContent()) {
				Documents documento = new Documents();
				documento.setId(documentos.getId());
				documento.setCorreo(documentos.getCorreo());
				documento.setDescuento(documentos.getDescuento());
				documento.setDireccion(documentos.getDireccion());
				documento.setEstado(documentos.getEstado());
				documento.setFechacreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
				documento.setFechavencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
				documento.setIdpropietario(documentos.getIdpropietario().getId());
				documento.setLocalidad(documentos.getLocalidad());
				documento.setNombreropietario(documentos.getIdpropietario().getNombre());
				documento.setNumero(documentos.getNumero());
				documento.setReferencia(documentos.getReferencia());
				
				if(documentos.getEstado().equals('P')){
					List<Pago> pagos = pagoRepository.findByIddocumento_id(documentos.getId());
					if(pagos.isEmpty()){
						Ordernes orden = ordenesRepository.findByFacturas(documentos.getReferencia());
						if(orden != null){
							if(orden.getFacturasPagosFechaDePago() != null){
								documento.setFechaPago(orden.getFacturasPagosFechaDePago().replace('/', '-'));
							}else{
								documento.setFechaPago("");
							}
							
						}else{
							documento.setFechaPago("");
						}
					}else{
						for(Pago pago: pagos){
							documento.setFechaPago(new SimpleDateFormat("dd-MM-yyyy").format(pago.getFechapago()));
						}
					}
				}
				/*
				List<Pago> pagos = pagoRepository.findByIddocumento_id(documentos.getId());
				if(pagos.isEmpty()){
					documento.setTotalPagado(new Double(0));
					documento.setFechaPago("");
					//documento.setSaldo(documentos.getSaldo());
				}else{
					Double suma= new Double(0);
					for(Pago pago: pagos){
						documento.setFechaPago(new SimpleDateFormat("dd-MM-yyyy").format(pago.getFechapago()));
						suma =  new Double(df2.format(suma + pago.getValortotal()));
					}
					documento.setTotalPagado(new Double(df2.format(suma)));
					//documento.setSaldo(documentos.getSaldo() - pago.getValortotal());
				}*/
				documento.setSaldo(new Double(df2.format(documentos.getSaldo())));
				documento.setSecuencia(documentos.getSecuencia());
				documento.setSubtotalconiva(documentos.getSubtotalconiva());
				documento.setSubtotalsiniva(documentos.getSubtotalsiniva());
				documento.setSucursal(documentos.getSucursal());
				documento.setTelefono(documentos.getTelefono());
				documento.setTipodocumento(documentos.getTipodocumento().getNombre());
				documento.setTipoidentificacion(documentos.getTipoidentificacion());
				List<Detalle> listDetalles = new ArrayList<>();
				for(DetalleDocumento detalles: documentos.getDetalleDocumentoCollection()){
					Detalle detalle = new Detalle();
					detalle.setId(detalles.getDetalleDocumentoPK().getId());
					detalle.setCantidad(detalles.getCantidad());
					detalle.setDescuento(detalles.getDescuento());
					detalle.setLinea(detalles.getDetalleDocumentoPK().getLinea());
					detalle.setPorcentajeiva(detalles.getPorcentajeiva());
					detalle.setProducto(detalles.getProducto());
					detalle.setSubtotal(new Double(df2.format((detalles.getPreciounitario()) * detalles.getCantidad())));
					detalle.setValoriva(detalles.getValoriva());
					listDetalles.add(detalle);
				}
				if(listDetalles != null){
					documento.setDetalle(listDetalles);
				}
				data.add(documento);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error GetOwner {}", e);
			message = "Error al consultar los propietarios";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	
	@Transactional
	@PostMapping(path = "/getDocumentPay/{id}", consumes = "application/json", produces = "application/json")
	public PagesDocuments GetDocumentPay(@RequestBody PageQuery obj, @PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetDocumentPay");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesDocuments paginas = new PagesDocuments();
		List<Documents> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderDocument(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);

			DocumentoVenta documentoActual = documentoVentaRepository.findOne(id);
			Integer idPropietario = documentoActual.getIdpropietario().getId();
			Page<DocumentoVenta> pagesTotal;
    		if(obj.getSearch().getValue().equals("")){
    			pagesTotal = documentoVentaRepository.findByIdpropietario_IdAndIdNot(idPropietario, id, pageConfig);
    		}else{
    			pagesTotal = utility.listaPaginasDocumentPay(obj.getSearch(), pageConfig, documentoVentaRepository);
    		}
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (DocumentoVenta documentos : pagesTotal.getContent()) {
				Documents documento = new Documents();
				documento.setId(documentos.getId());
				documento.setCorreo(documentos.getCorreo());
				documento.setDescuento(documentos.getDescuento());
				documento.setDireccion(documentos.getDireccion());
				documento.setEstado(documentos.getEstado());
				documento.setFechacreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
				documento.setFechavencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
				documento.setIdpropietario(documentos.getIdpropietario().getId());
				documento.setLocalidad(documentos.getLocalidad());
				documento.setNombreropietario(documentos.getIdpropietario().getNombre());
				documento.setNumero(documentos.getNumero());
				documento.setReferencia(documentos.getReferencia());
				
				List<Pago> pagos = pagoRepository.findByIddocumento_id(documentos.getId());
				if(pagos.isEmpty()){
					documento.setTotalPagado(new Double(0));
					documento.setFechaPago("");
					//documento.setSaldo(documentos.getSaldo());
				}else{
					Double suma= new Double(0);
					List<String> fechasList = new ArrayList<>();
					for(Pago pago: pagos){
						fechasList.add(new SimpleDateFormat("dd-MM-yyyy").format(pago.getFechapago()));
						documento.setFechaPago(new SimpleDateFormat("dd-MM-yyyy").format(pago.getFechapago()));
						suma =  new Double(df2.format(suma + pago.getValortotal()));
					}
					documento.setTotalPagado(suma);
					documento.setFechasPago(fechasList);
					//documento.setSaldo(documentos.getSaldo() - pago.getValortotal());
				}
				documento.setSaldo(documentos.getSaldo());
				documento.setSecuencia(documentos.getSecuencia());
				documento.setSubtotalconiva(documentos.getSubtotalconiva());
				documento.setSubtotalsiniva(documentos.getSubtotalsiniva());
				documento.setSucursal(documentos.getSucursal());
				documento.setTelefono(documentos.getTelefono());
				documento.setTipodocumento(documentos.getTipodocumento().getNombre());
				documento.setTipoidentificacion(documentos.getTipoidentificacion());
				List<Detalle> listDetalles = new ArrayList<>();
				for(DetalleDocumento detalles: documentos.getDetalleDocumentoCollection()){
					Detalle detalle = new Detalle();
					detalle.setId(detalles.getDetalleDocumentoPK().getId());
					detalle.setCantidad(detalles.getCantidad());
					detalle.setDescuento(detalles.getDescuento());
					detalle.setLinea(detalles.getDetalleDocumentoPK().getLinea());
					detalle.setPorcentajeiva(detalles.getPorcentajeiva());
					detalle.setProducto(detalles.getProducto());
					detalle.setSubtotal(new Double(df2.format((detalles.getPreciounitario()) * detalles.getCantidad())));
					detalle.setValoriva(detalles.getValoriva());
					listDetalles.add(detalle);
				}
				if(listDetalles != null){
					documento.setDetalle(listDetalles);
				}
				data.add(documento);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error GetDocumentPay {}", e);
			message = "Error al consultar los propietarios";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@PostMapping(path = "/createOwner", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> CreateOwner(@RequestBody CreateOwner request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio CreateOwner");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		PropietarioCabecera propietarioCab = new PropietarioCabecera();
		Propietario propietario = new Propietario();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Propietario Creado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		String suscripcion="";
    		if(utility.validationOwner(request)){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		propietarioCab.setId(propietarioCabeceraRepository.getNextId() + 1);
    		propietarioCab.setNombre(request.getNombre());
    		propietarioCab.setCorreo(request.getCorreo());
    		propietarioCab.setDireccion(request.getDireccion());
    		propietarioCab.setIdentificacion(request.getIdentificacion());
    		propietarioCab.setTipoidentificacion(request.getTipoIdentificacion().charAt(0));
    		propietarioCab.setTelefono(request.getTelefono());
    		propietarioCab.setMovil(request.getMovil());
    		propietarioCab.setEstado('A');
    		propietarioCabeceraRepository.save(propietarioCab);
    		
    		if(request.getSuscripcion()!=null && request.getSuscripcion() > 0){
    			suscripcion = suscripcionRepository.findOne(request.getSuscripcion()).getNombre();
    			propietario.setId(propietarioRepository.getNextId() + 1);
        		propietario.setNombre(request.getNombre());
        		propietario.setCorreo(request.getCorreo());
        		propietario.setDireccion(request.getDireccion());
        		propietario.setIdentificacion(request.getIdentificacion());
        		propietario.setTipoidentificacion(request.getTipoIdentificacion().charAt(0));
        		propietario.setTelefono(request.getTelefono());
        		propietario.setMovil(request.getMovil());
        		propietario.setSuscripcion(suscripcionRepository.findOne(request.getSuscripcion()));
        		propietario.setEstado('A');
        		propietario.setPropietariocabecera(propietarioCab);
        		propietarioRepository.save(propietario);
    		}
    		
    		Usuario usuario = usuarioRepository.findOne(idUsuario);
    		Auditoria auditoria = new Auditoria();
    		auditoria.setId(auditoriaRepository.maxId() + 1);
    		auditoria.setFecha(new Date());
    		auditoria.setOpcionpadre("");
    		auditoria.setOpcionhija("");
    		auditoria.setAccion("Crear Propietario");
    		auditoria.setDetalle("Datos del Propietario: Nombre: " + request.getNombre() +", Correo: " + request.getCorreo() +", Dirección: " + request.getDireccion() + ", Identificación: " + request.getIdentificacion() +", Tipo Identificación: " + request.getTipoIdentificacion().charAt(0) + ", Teléfono: " + request.getTelefono() + ", Móvil: " + request.getMovil() +", Suscripcion: " + suscripcion);
    		auditoria.setIdusuario(usuario);
    		auditoria.setJson(ow.writeValueAsString(request));
    		auditoriaRepository.save(auditoria);
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Crear Propietario {}", e);
			status = "ERROR";
			message = "Error al Crear Propietario " + request.getNombre();
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/updateOwner", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> UpdateOwner(@RequestBody UpdateOwner request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio UpdateOwner");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		PropietarioCabecera propietario = new PropietarioCabecera();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Propietario Actualizado Correctamente";
		String status ="SUCCESS";
		String nombreAnterior ="";
		String correoAnterior ="";
		String direccionAnterior="";
		String identificacionAnterior="";
		String tipoIdentificacionAnterior="";
		String telefonoAnterior="";
		String movilAnterior="";
		try{
			watch = new StopWatch();
    		watch.start();
    		/*if(utility.validationOwner(request)){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}*/
    		propietario = propietarioCabeceraRepository.findOne(request.getId());
    		if(propietario == null){
    			status = "WARNING";
    			message = "Propietario no existe";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		request = utility.validationEspace(request);
    		nombreAnterior = propietario.getNombre();
    		correoAnterior = propietario.getCorreo();
    		direccionAnterior = propietario.getDireccion();
    		identificacionAnterior = propietario.getIdentificacion();
    		tipoIdentificacionAnterior = propietario.getTipoidentificacion().toString();
    		telefonoAnterior = propietario.getTelefono();
    		movilAnterior = propietario.getMovil();
    		
    		if(request.getNombre() != null)
    			propietario.setNombre(request.getNombre());
    		if(request.getCorreo() != null)
    			propietario.setCorreo(request.getCorreo());
    		if(request.getDireccion() != null)
    			propietario.setDireccion(request.getDireccion());
    		if(request.getIdentificacion() != null)
    			propietario.setIdentificacion(request.getIdentificacion());
    		if(request.getTipoIdentificacion() != null)
    			propietario.setTipoidentificacion(request.getTipoIdentificacion().charAt(0));
    		if(request.getTelefono() != null)
    			propietario.setTelefono(request.getTelefono());
    		if(request.getMovil() != null)
    			propietario.setMovil(request.getMovil());
    		
    		
    		List<Propietario> propietarioList = propietarioRepository.findByPropietariocabecera_Id(request.getId());
    		
    		if(!propietarioList.isEmpty()){
    			for(Propietario prop: propietarioList){
    				if(request.getNombre() != null)
    					prop.setNombre(request.getNombre());
    	    		if(request.getCorreo() != null)
    	    			prop.setCorreo(request.getCorreo());
    	    		if(request.getDireccion() != null)
    	    			prop.setDireccion(request.getDireccion());
    	    		if(request.getIdentificacion() != null)
    	    			prop.setIdentificacion(request.getIdentificacion());
    	    		if(request.getTipoIdentificacion() != null)
    	    			prop.setTipoidentificacion(request.getTipoIdentificacion().charAt(0));
    	    		if(request.getTelefono() != null)
    	    			prop.setTelefono(request.getTelefono());
    	    		if(request.getMovil() != null)
    	    			prop.setMovil(request.getMovil());
    	    		
    	    		propietarioRepository.save(prop);
    			}
    		}
    		propietarioCabeceraRepository.save(propietario);
    		
    		Usuario usuario = usuarioRepository.findOne(idUsuario);
    		Auditoria auditoria = new Auditoria();
    		auditoria.setId(auditoriaRepository.maxId() + 1);
    		auditoria.setFecha(new Date());
    		auditoria.setOpcionpadre("");
    		auditoria.setOpcionhija("");
    		auditoria.setAccion("Actualizar Propietario");
    		auditoria.setDetalle("Datos del Propietario Anterior: Nombre: " + nombreAnterior +", Correo: " + correoAnterior +", Dirección: " + direccionAnterior + ", Identificación: " + identificacionAnterior +", Tipo Identificación: " + tipoIdentificacionAnterior + ", Teléfono: " + telefonoAnterior + ", Móvil: " + movilAnterior
    		+ " Datos del Propietario Ahora: Nombre: " + request.getNombre() +", Correo: " + request.getCorreo() +", Dirección: " + request.getDireccion() + ", Identificación: " + request.getIdentificacion() +", Tipo Identificación: " + request.getTipoIdentificacion().charAt(0) + ", Teléfono: " + request.getTelefono() + ", Móvil: " + request.getMovil());
    		auditoria.setIdusuario(usuario);
    		auditoria.setJson(ow.writeValueAsString(request));
    		auditoriaRepository.save(auditoria);
    		
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Actualizar Propietario {}", e);
			status = "ERROR";
			message = "Error al Actualizar Propietario " + request.getNombre();
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@DeleteMapping(path = "/deleteOwner/{id}", produces = "application/json")
	public ResponseEntity<String> DeleteOwner(@PathVariable("id") String id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio DeleteOwner");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		Propietario propietario = new Propietario();
		Suscripcion suscripcion = new Suscripcion();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Propietario Eliminado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(id.equals("")){
    			status = "WARNING";
    			message = "Por favor indique el id del propietario ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		propietario = propietarioRepository.findOne(new Integer(id));
    		if(propietario == null){
    			status = "WARNING";
    			message = "Propietario no Existe";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		if(propietario.getEstado().equals("I")){
    			status = "WARNING";
    			message = "Propietario Inactivo";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		propietario.setEstado('I');
    		suscripcion = suscripcionRepository.findOne(0);
    		propietario.setSuscripcion(suscripcion);
    		propietarioRepository.save(propietario);
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Eliminar Propietario {}", e);
			status = "ERROR";
			message = "Error al Eliminar Propietario ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/activateOwner/{id}", produces = "application/json")
	public ResponseEntity<String> ActivateOwner(@PathVariable("id") String id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio ActivateOwner");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		Propietario propietario = new Propietario();
		Suscripcion suscripcion = new Suscripcion();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Propietario Activado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(id.equals("")){
    			status = "WARNING";
    			message = "Por favor indique el id del propietario ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		propietario = propietarioRepository.findOne(new Integer(id));
    		if(propietario == null){
    			status = "WARNING";
    			message = "Propietario no Existe";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		if(propietario.getEstado().equals('A')){
    			status = "WARNING";
    			message = "Propietario esta Activo";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		propietario.setEstado('A');
    		//suscripcion = suscripcionRepository.findOne(0);
    		//propietario.setSuscripcion(suscripcion);
    		propietarioRepository.save(propietario);
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Activar Propietario {}", e);
			status = "ERROR";
			message = "Error al Activar Propietario ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getAllSuscriptions",produces = "application/json")
	public ResponseEntity<String> GetAllSuscriptions() throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetAllSuscriptions");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseSuscriptions response = new ResponseSuscriptions();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		List<Suscripcion> suscripciones =  (List<Suscripcion>) suscripcionRepository.findAll();
    		response = utility.SetResponseSuscrpcion(status, message, response, HttpStatus.OK.value(), suscripciones);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Consultar Suscripciones {}", e);
			status = "ERROR";
			message = "Error al Consultar Suscripciones ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseSuscrpcion(status, message, response, HttpStatus.BAD_REQUEST.value(), null)), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	
	@Transactional
	@GetMapping(path = "/getInfoDashboard",produces = "application/json")
	public ResponseEntity<String> GetInfoDashboard() throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetInfoDashboard");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseInfo response = new ResponseInfo();
		List<Info> listInfo = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		
    		List<TipoSuscripcion> tipoSuscripcion = (List<TipoSuscripcion>) tipoSuscripcionRepository.findAllDashboard();

    		for(TipoSuscripcion tipo: tipoSuscripcion){
    			Info info = new Info();
    			info.setNombre(tipo.getDescripcion());
    			if(tipo.getId() == 2){
    				info.setTotal(localidadRepository.getTotalTipoSuite(tipo.getId()));
    			}else{
    				info.setTotal(localidadRepository.getTotalTipo(tipo.getId()));
    			}
    			
    			List<Info2> listInfo2 = new ArrayList<>();
    			
    			List<Suscripcion> suscripcion = suscripcionRepository.findByTipo_Id(tipo.getId());
    			
    			if(!suscripcion.isEmpty()){
    				for(Suscripcion sus : suscripcion){
    					Info2 info2 = new Info2();
    					info2.setNombre(sus.getNombre());
    					info2.setTotalPropiedades(localidadRepository.getTotalSuscripcion(sus.getId()));
    					info2.setTotalPropietarios(localidadRepository.getTotalPropietarios(sus.getId()));
    					listInfo2.add(info2);
    				}
    				info.setLista(listInfo2);
    			}
    			listInfo.add(info);
    		}
    		
    		Info info3 = new Info();
    		info3.setNombre("Suites por Entrada");
    		info3.setTotal(localidadRepository.getTotalTipoSuite(2));
    		List<Info2> listInfo3 = new ArrayList<>();
    		Info2 info23 = new Info2();
    		info23.setNombre("Suite Este");
			info23.setTotalPropiedades(localidadRepository.findBySuite("E-%"));
			info23.setTotalPropietarios(propietarioCabeceraRepository.getTotalPropietariosSuite("E-%"));
			listInfo3.add(info23);
			Info2 info24 = new Info2();
    		info24.setNombre("Suite Oeste");
			info24.setTotalPropiedades(localidadRepository.findBySuite("O-%"));
			info24.setTotalPropietarios(propietarioCabeceraRepository.getTotalPropietariosSuite("O-%"));
			listInfo3.add(info24);
			info3.setLista(listInfo3);
			listInfo.add(info3);
			
			
			Info info4 = new Info();
    		info4.setNombre("Suite Este");
    		info4.setTotal(localidadRepository.findBySuite("E-%"));
    		List<Info2> listInfo4 = new ArrayList<>();
    		
    		for(int i=0; i < 5; i ++){
    			Info2 info = new Info2();
        		info.setNombre("Suite Piso " + i);
    			info.setTotalPropiedades(localidadRepository.findBySuite("E-" + i + "%"));
    			info.setTotalPropietarios(propietarioCabeceraRepository.getTotalPropietariosSuite("E-" + i + "%"));
    			listInfo4.add(info);
    		}
    		info4.setLista(listInfo4);
			listInfo.add(info4);
			
			
			Info info5 = new Info();
    		info5.setNombre("Suite Oeste");
    		info5.setTotal(localidadRepository.findBySuite("O-%"));
    		List<Info2> listInfo5 = new ArrayList<>();
    		
    		for(int i=1; i < 5; i ++){
    			Info2 info = new Info2();
        		info.setNombre("Suite Piso " + i);
    			info.setTotalPropiedades(localidadRepository.findBySuite("O-" + i + "%"));
    			info.setTotalPropietarios(propietarioCabeceraRepository.getTotalPropietariosSuite("O-" + i + "%"));
    			listInfo5.add(info);    			
    		}
    		info5.setLista(listInfo5);
			listInfo.add(info5);
			
			
    	
    		response = utility.SetResponseInfo(status, message, response, HttpStatus.OK.value(), listInfo);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Consultar Informacion {}", e);
			status = "ERROR";
			message = "Error al Consultar Informacion ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseInfo(status, message, response, HttpStatus.BAD_REQUEST.value(), null)), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getBalanceOwner/{id}",produces = "application/json")
	public ResponseEntity<String> GetBalanceOwner(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetBalanceOwner");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseDeuda response = new ResponseDeuda();
		Deuda deu = new Deuda();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		List<Localidad> localidades = localidadRepository.findByPropietario(id);
    		Double deuda = new Double(0);
    		if(!localidades.isEmpty()){
    			for(Localidad localidad: localidades){
    				List<DocumentoVenta> documentos = documentoVentaRepository.findByIdpropietario_IdAndEstadoAndLocalidad(id, 'A', localidad.getCodigo());
            		if(!documentos.isEmpty()){
            			for(DocumentoVenta documento: documentos){
            				deuda = new Double(df2.format(deuda + documento.getSaldo()));
            			}
            		}
    			}
    			
    		}
    		deu.setDeuda(new Double(df2.format(deuda)));
    		Propietario propietario = propietarioRepository.findOne(id);
    		if(propietario != null){
    			List<Abonos> abonoList = abonosRepository.findByEstadoAndIdcabecera_id('A', propietario.getPropietariocabecera().getId());
        		if(!abonoList.isEmpty()){
        			Double total = new Double(0);
        			for(Abonos abono: abonoList){
        				total = new Double(df2.format(total + abono.getAbono()));
        			}
        			deu.setSaldoFavor(total);
        		}else{
        			deu.setSaldoFavor(new Double(0));
        		}
    		}
    		
    		response = utility.SetResponseDeuda(status, message, response, HttpStatus.OK.value(), deu);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Consultar Saldo {}", e);
			status = "ERROR";
			message = "Error al Consultar Saldo ";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PostMapping(path = "/createAbono", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> CreateAbono(@RequestBody CreateAbono request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio CreateAbono");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		PropietarioCabecera propietario = new PropietarioCabecera();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Abono Añadido/Creado Correctamente";
		String status ="SUCCESS";
		Double abonoTotal = new Double(0);
		String tipoPago ="";
		try{
			watch = new StopWatch();
    		watch.start();
    		propietario = propietarioCabeceraRepository.findOne(request.getIdPropietario());
    		Abonos abono = abonosRepository.findByEstadoAndIdcabecera_idAndIdtipopago_Id('A', propietario.getId(), request.getIdTipoPago());
			if(abono != null){
				Abonos abonos = new Abonos();
				abonos.setAbono(new Double(df2.format(request.getSaldo() + abono.getAbono())));
				abonoTotal = abonos.getAbono();
				abonos.setEstado('A');
				abonos.setFecha(new Date());
				abonos.setIdtipopago(abono.getIdtipopago());
				tipoPago = abono.getIdtipopago().getDescripcion();
				abonos.setAniadido(request.getSaldo());
				abonos.setLocalidad("");
				abonos.setIdcabecera(propietario);
				abonos.setId(abonosRepository.maxId() + 1);
				abonos.setObservacion(request.getObservacion());
				abono.setEstado('I');
				abonosRepository.save(abono);
				abonosRepository.save(abonos);
			}else{
				TipoPago tipo = tipoPagoRepository.findOne(request.getIdTipoPago());
				tipoPago = tipo.getDescripcion();
				Abonos abonos = new Abonos();
				abonos.setAbono(request.getSaldo());
				abonoTotal = abonos.getAbono();
				abonos.setEstado('A');
				abonos.setFecha(new Date());
				abonos.setIdtipopago(tipo);
				abonos.setAniadido(request.getSaldo());
				abonos.setLocalidad("");
				abonos.setIdcabecera(propietario);
				abonos.setId(abonosRepository.maxId() + 1);
				abonos.setObservacion(request.getObservacion());
				abonosRepository.save(abonos);
			}
			
			Usuario usuario = usuarioRepository.findOne(idUsuario);
			Auditoria auditoria = new Auditoria();
			auditoria.setId(auditoriaRepository.maxId() + 1);
			auditoria.setFecha(new Date());
			auditoria.setOpcionpadre("");
			auditoria.setOpcionhija("");
			auditoria.setAccion("Crear o Añadir Abono");
			auditoria.setDetalle("Propietario: " + propietario.getNombre() + " Forma de Pago: " + tipoPago + " Abono Añadido: " + request.getSaldo() + " Abono Total: " + abonoTotal);
			auditoria.setIdusuario(usuario);
			auditoria.setJson(ow.writeValueAsString(request));
			auditoriaRepository.save(auditoria);
			
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Crear Abono {}", e);
			status = "ERROR";
			message = "Error al Crear Abono ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PostMapping(path = "/removeAbono", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> RemoveAbono(@RequestBody RemoveAbono request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio RemoveAbono");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		PropietarioCabecera propietario = new PropietarioCabecera();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Abono Reducido Correctamente";
		String status ="SUCCESS";
		Double abonoTotal = new Double(0);
		try{
			watch = new StopWatch();
    		watch.start();
    		propietario = propietarioCabeceraRepository.findOne(request.getIdPropietario());
    		Abonos abono = abonosRepository.findByEstadoAndIdcabecera_idAndIdtipopago_Id('A', propietario.getId(), request.getIdTipoPago());
			if(abono != null){
				if(request.getSaldo() > abono.getAbono()){
					status = "WARNING";
	    			message = "No puede quitar mas de lo que existe de Abono";
	    			logger.info(message);
	    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
				}
				Abonos abonos = new Abonos();
				Double abonoReducido = new Double(df2.format(-request.getSaldo() + abono.getAbono()));
				if(abonoReducido == 0){
					abonos.setAbono(new Double(0));
					abonos.setEstado('I');
				}else{
					abonos.setAbono(new Double(df2.format(abonoReducido)));
					abonos.setEstado('A');
				}
				abonoTotal = abonos.getAbono();
				abonos.setFecha(new Date());
				abonos.setIdtipopago(abono.getIdtipopago());
				abonos.setAniadido(-request.getSaldo());
				abonos.setLocalidad("");
				abonos.setIdcabecera(propietario);
				abonos.setId(abonosRepository.maxId() + 1);
				abonos.setObservacion(abono.getObservacion());
				abono.setEstado('I');
				abonosRepository.save(abono);
				abonosRepository.save(abonos);
				
				Usuario usuario = usuarioRepository.findOne(idUsuario);
				Auditoria auditoria = new Auditoria();
				auditoria.setId(auditoriaRepository.maxId() + 1);
				auditoria.setFecha(new Date());
				auditoria.setOpcionpadre("");
				auditoria.setOpcionhija("");
				auditoria.setAccion("Reducir Abono");
				auditoria.setDetalle("Propietario: " + propietario.getNombre() + " Forma de Pago: " + abonos.getIdtipopago().getDescripcion() + " Abono Restado: " + -request.getSaldo() + " Abono Total: " + abonoTotal);
				auditoria.setIdusuario(usuario);
				auditoria.setJson(ow.writeValueAsString(request));
				auditoriaRepository.save(auditoria);
			}else{
				status = "WARNING";
    			message = "No hay abono a reducir";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
			}
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Remover Abono {}", e);
			status = "ERROR";
			message = "Error al Remover Abono ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@GetMapping(path = "/getDocumentsByList/{list}", produces = "application/json")
	public ResponseEntity<String> GetDocumentsByList(@PathVariable("list") String list) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio getDocumentsByList");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseDocumentGroup response = new ResponseDocumentGroup();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		int i=0;
    		String propietario = "";
    		StringTokenizer st = new StringTokenizer(list,"-");  
    		
    	     while (st.hasMoreTokens()) {
    	    	Integer id = Integer.parseInt(st.nextToken());
    			DocumentoVenta documento = documentoVentaRepository.findOne(id);
    			if(i == 0){
    				propietario = documento.getIdpropietario().getNombre();
    				i++;
    			}
    			if(documento.getEstado().equals('P') || (!propietario.equals(documento.getIdpropietario().getNombre()))){
    				status = "WARNING";
        			message = "Debe escoger documentos del mismo Propietario o documentos No Pagados";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseDocumentGroup(status, message, response, HttpStatus.OK.value(),null)), HttpStatus.OK);
    			}
    		}
    		DocumentsGroup documento = new DocumentsGroup();
    		List<DetalleGroup> listDetalles = new ArrayList<>();
    		int c=0;
    		st = new StringTokenizer(list,"-");  
    		
    		while (st.hasMoreTokens()) {
    			Integer id = Integer.parseInt(st.nextToken());
    			DocumentoVenta documentos = documentoVentaRepository.findOne(id);
    			if(c > 0){
    				String idDoc = documento.getId();
    				documento.setId(idDoc + "-" + documentos.getId().toString());
    				String localidad = documento.getLocalidad();
    				documento.setLocalidad(localidad + " " + documentos.getLocalidad());
    				//String numero = documento.getNumero();
    				//documento.setNumero(numero + " " + documentos.getNumero());
    				documento.setNumero("");
    				//String referencia = documento.getReferencia();
    				//documento.setReferencia(referencia + "-" + documentos.getReferencia());
    				documento.setReferencia("");
    				Double saldo = documento.getSaldo();
    				documento.setSaldo(new Double(df2.format(documentos.getSaldo() + saldo)));
    				//String secuencia = documento.getSecuencia();
    				documento.setSecuencia("");
    				Double subtotalconiva = documento.getSubtotalconiva();
    				documento.setSubtotalconiva(documentos.getSubtotalconiva() + subtotalconiva);
    				Double subtotalsiniva = documento.getSubtotalsiniva();
    				documento.setSubtotalsiniva(documentos.getSubtotalsiniva() + subtotalsiniva);
    			}else{
    				documento.setId(documentos.getId().toString());
    				documento.setLocalidad(documentos.getLocalidad());
    				documento.setNumero("");
    				documento.setReferencia("");
    				documento.setSaldo(documentos.getSaldo());
        			documento.setSecuencia("");
        			documento.setSubtotalconiva(documentos.getSubtotalconiva());
        			documento.setSubtotalsiniva(documentos.getSubtotalsiniva());
    			}
    	
    			for(DetalleDocumento detalles: documentos.getDetalleDocumentoCollection()){
    				DetalleGroup detalle = new DetalleGroup();
    				detalle.setId(detalles.getDetalleDocumentoPK().getId());
    				detalle.setCantidad(detalles.getCantidad());
    				detalle.setDescuento(detalles.getDescuento());
    				detalle.setLinea(detalles.getDetalleDocumentoPK().getLinea());
    				detalle.setPorcentajeiva(detalles.getPorcentajeiva());
    				detalle.setPrecioUnitario(detalles.getPreciounitario());
    				if(detalles.getProducto().contains("ALÍCUOTA PALCO") || detalles.getProducto().contains("ALÍCUOTA SUITE") || detalles.getProducto().contains("ALÍCUOTA  PALCO") || detalles.getProducto().contains("ALÍCUOTA  SUITE")){
    					detalle.setLocalidad(documentos.getLocalidad());
    					String anio = new SimpleDateFormat("YYYY").format(documentos.getFechacreacion()).toUpperCase();
    		    		//Month meses = documentos.getFechacreacion().toInstant().atZone(ZoneId.systemDefault()).toLocalDate().getMonth();
    		    		Month meses = Instant.ofEpochMilli(documentos.getFechacreacion().getTime()).atZone(ZoneId.systemDefault()).toLocalDate().getMonth();
    		    		String mes = meses.getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toUpperCase();
    					detalle.setFecha(mes + "-"+anio);
    				}else{
    					detalle.setLocalidad("");
    					detalle.setFecha("");
    				}
    				detalle.setProducto(detalles.getProducto());
    				detalle.setSubtotal(new Double(df2.format((detalles.getPreciounitario() + detalles.getValoriva() - detalles.getDescuento()) * detalles.getCantidad())));
    				detalle.setValoriva(detalles.getValoriva());
    				listDetalles.add(detalle);
    			}
    			
    			documento.setCorreo(documentos.getCorreo());
    			documento.setDescuento(documentos.getDescuento());
    			documento.setDireccion(documentos.getDireccion());
    			documento.setEstado(documentos.getEstado());
    			documento.setFechacreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
    			documento.setFechavencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
    			documento.setIdpropietario(documentos.getIdpropietario().getPropietariocabecera().getId());
    			documento.setNombreropietario(documentos.getIdpropietario().getNombre());
    			documento.setSucursal(documentos.getSucursal());
    			documento.setTelefono(documentos.getTelefono());
    			documento.setTipodocumento(documentos.getTipodocumento().getNombre());
    			documento.setTipoidentificacion(documentos.getTipoidentificacion());
    			c++;
    		}

    		if(listDetalles != null){
				documento.setDetalle(listDetalles);
			}
    		
    		List<Abonos> abonoList = abonosRepository.findByEstadoAndIdcabecera_id('A', documento.getIdpropietario());
			if(!abonoList.isEmpty()){
    			Double total = new Double(0);
    			for(Abonos abono: abonoList){
    				total = new Double(df2.format(total + abono.getAbono()));
    			}
    			documento.setSaldoFavor(total);
    		}else{
    			documento.setSaldoFavor(new Double(0));
    		}
			
			response = utility.SetResponseDocumentGroup(status, message, response, HttpStatus.OK.value(), documento);
			logger.error(message);
		}catch(Exception e){
			logger.error("Error getDocumentsByList {}", e);
			message = "Error al consultar el documento";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseDocumentGroup(status, message, response, HttpStatus.BAD_REQUEST.value(),null)), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	
	
	@Transactional
	@GetMapping(path = "/getDocumentsListPayment/{id}", produces = "application/json")
	public ResponseEntity<String> GetDocumentsListPayment(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetDocumentsListPayment");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseDocumentGroup response = new ResponseDocumentGroup();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		
    		DocumentsGroup documento = new DocumentsGroup();
    		List<DetalleGroup> listDetalles = new ArrayList<>();
    		List<String> tipoPagoList = new ArrayList<>();
    		int c=0;
    		GrupoDocumento grupo= grupoDocumentoRepository.findOne(id);
    		List<Pago> pagos = new ArrayList<>();
    		if(grupo != null){
    			List<GrupoDetalle> detallesList = (List<GrupoDetalle>) grupo.getGrupoDetalleCollection();
    			for(GrupoDetalle det : detallesList) {
        			DocumentoVenta documentos = documentoVentaRepository.findOne(det.getGrupoDetallePK().getIddocumento());
        			if(c > 0){
        				List<Pago> pago= pagoRepository.findByIddocumento_id(documentos.getId());
        				documento.setId(grupo.getId().toString());
        				String localidad = documento.getLocalidad();
        				documento.setLocalidad(localidad + " " + documentos.getLocalidad());
        				documento.setNumero(grupo.getNumero());
        				documento.setReferencia(grupo.getReferencia());
        				Double saldo = documento.getSaldo();
        				documento.setSaldo(new Double(df2.format(documentos.getSaldo() + saldo)));
        				//String secuencia = documento.getSecuencia();
        				documento.setSecuencia("");
        				Double subtotalconiva = documento.getSubtotalconiva();
        				documento.setSubtotalconiva(documentos.getSubtotalconiva() + subtotalconiva);
        				Double subtotalsiniva = documento.getSubtotalsiniva();
        				documento.setSubtotalsiniva(documentos.getSubtotalsiniva() + subtotalsiniva);
        				if(!pago.isEmpty()){
        					pagos.addAll(pago);
        				}
        				
        			}else{
        				List<Pago> pago = pagoRepository.findByIddocumento_id(documentos.getId());
        				documento.setId(grupo.getId().toString());
        				documento.setLocalidad(documentos.getLocalidad());
        				documento.setNumero(grupo.getNumero());
        				documento.setReferencia(grupo.getReferencia());
        				documento.setSaldo(documentos.getSaldo());
            			documento.setSecuencia("");
            			documento.setSubtotalconiva(documentos.getSubtotalconiva());
            			documento.setSubtotalsiniva(documentos.getSubtotalsiniva());
            			if(!pago.isEmpty()){
        					pagos.addAll(pago);
        				}
        			}
        	
        			for(DetalleDocumento detalles: documentos.getDetalleDocumentoCollection()){
        				DetalleGroup detalle = new DetalleGroup();
        				detalle.setId(detalles.getDetalleDocumentoPK().getId());
        				detalle.setCantidad(detalles.getCantidad());
        				detalle.setDescuento(detalles.getDescuento());
        				detalle.setLinea(detalles.getDetalleDocumentoPK().getLinea());
        				detalle.setPorcentajeiva(detalles.getPorcentajeiva());
        				detalle.setPrecioUnitario(detalles.getPreciounitario());
        				if(detalles.getProducto().contains("ALÍCUOTA PALCO") || detalles.getProducto().contains("ALÍCUOTA SUITE") || detalles.getProducto().contains("ALÍCUOTA  PALCO") || detalles.getProducto().contains("ALÍCUOTA  SUITE")){
        					detalle.setLocalidad(documentos.getLocalidad());
        					String anio = new SimpleDateFormat("YYYY").format(documentos.getFechacreacion()).toUpperCase();
        		    		//Month meses = documentos.getFechacreacion().toInstant().atZone(ZoneId.systemDefault()).toLocalDate().getMonth();
        					Month meses = Instant.ofEpochMilli(documentos.getFechacreacion().getTime()).atZone(ZoneId.systemDefault()).toLocalDate().getMonth();
        					String mes = meses.getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toUpperCase();
        					detalle.setFecha(mes + "-"+anio);
        				}else{
        					detalle.setLocalidad("");
        					detalle.setFecha("");
        				}
        				detalle.setProducto(detalles.getProducto());
        				detalle.setSubtotal(new Double(df2.format((detalles.getPreciounitario() + detalles.getValoriva() - detalles.getDescuento()) * detalles.getCantidad())));
        				detalle.setValoriva(detalles.getValoriva());
        				listDetalles.add(detalle);
        			}
        			
        			documento.setCorreo(documentos.getCorreo());
        			documento.setDescuento(documentos.getDescuento());
        			documento.setDireccion(documentos.getDireccion());
        			documento.setEstado(documentos.getEstado());
        			documento.setFechacreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
        			documento.setFechavencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
        			documento.setIdpropietario(documentos.getIdpropietario().getPropietariocabecera().getId());
        			documento.setNombreropietario(documentos.getIdpropietario().getNombre());
        			documento.setSucursal(documentos.getSucursal());
        			documento.setTelefono(documentos.getTelefono());
        			documento.setTipodocumento(grupo.getTipodocumento().getNombre());
        			documento.setTipoidentificacion(documentos.getTipoidentificacion());
        			c++;
        		}

        		if(listDetalles != null){
    				documento.setDetalle(listDetalles);
    			}
        		
        		documento.setFechaPago(new SimpleDateFormat("dd-MM-yyyy").format(grupo.getFechacreacion()));
        		documento.setTotalPagado(grupo.getSaldo());
        		if(!pagos.isEmpty()){
        			String observacion = "N/A";
        			for(Pago p: pagos){
        				if(p.getValortotal() != 0){
        					observacion = p.getObservacion();
        					tipoPagoList.add(p.getIdtipopago().getDescripcion() + " - " + observacion);
        					break;
        				}
        			}
        			
        			documento.setTipoPago(tipoPagoList);
        		}
        		
        		List<Abonos> abonoList = abonosRepository.findByEstadoAndIdcabecera_id('A', grupo.getIdpropietario().getId());
    			if(!abonoList.isEmpty()){
        			Double total = new Double(0);
        			for(Abonos abono: abonoList){
        				total = new Double(df2.format(total + abono.getAbono()));
        			}
        			documento.setSaldoFavor(total);
        		}else{
        			documento.setSaldoFavor(new Double(0));
        		}
        		
    		}
    		
			
			response = utility.SetResponseDocumentGroup(status, message, response, HttpStatus.OK.value(), documento);
			logger.error(message);
		}catch(Exception e){
			logger.error("Error getDocumentsByList {}", e);
			message = "Error al consultar el documento";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseDocumentGroup(status, message, response, HttpStatus.BAD_REQUEST.value(),null)), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getOwnerByIdCab/{id}", produces = "application/json")
	public ResponseEntity<String> GetOwnerByIdCab(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetOwnerByIdCab");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		GetOwnerCab pageRest = new GetOwnerCab();
		ResponseOwnerCab response = new ResponseOwnerCab();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			PropietarioCabecera propietario = propietarioCabeceraRepository.findOne(id);
			if(propietario == null){
				status = "WARNING";
    			message = "Propietario No Existe ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseOwnerCab(status, message, response, HttpStatus.OK.value(), null)), HttpStatus.OK);
			}
			List<ec.com.propietarios.modelRest.Suscripcion> suscripcionesList = new ArrayList<>();
			pageRest.setId(propietario.getId());
			pageRest.setNombre(propietario.getNombre());
			pageRest.setDireccion(propietario.getDireccion());
			pageRest.setCorreo(propietario.getCorreo());
			pageRest.setTelefono(propietario.getTelefono());
			pageRest.setIdentificacion(propietario.getIdentificacion());
			pageRest.setTipoIdentificacion(propietario.getTipoidentificacion().toString());
			pageRest.setMovil(propietario.getMovil());
			List<Propietario> propList = propietarioRepository.findByPropietariocabecera_Id(propietario.getId());
			if(!propList.isEmpty()){
				StringBuilder str = new StringBuilder();
				StringBuilder propiedades  = new StringBuilder();
				for(Propietario prop: propList){
					
					List<Localidad> localidades = localidadRepository.findByPropietarioAndSuscripcion(prop.getId(), prop.getSuscripcion());
					if(localidades.size() > 0){
						ec.com.propietarios.modelRest.Suscripcion sus = new ec.com.propietarios.modelRest.Suscripcion();
						sus.setIdPropietario(prop.getId());
						sus.setEstado(prop.getEstado().toString());
						if(prop.getEstado().equals('A')){
							str.append(prop.getSuscripcion().getNombre() + " [ACTIVO]");
							sus.setSuscripcion(prop.getSuscripcion().getNombre() + " [ACTIVO]");
						}else{
							str.append(prop.getSuscripcion().getNombre() + " [INACTIVO]");
							sus.setSuscripcion(prop.getSuscripcion().getNombre() + " [INACTIVO]");
						}
						suscripcionesList.add(sus);
						str.append(", ");
						
						StringBuilder lo = new StringBuilder();
						for(Localidad localidad: localidades){
							lo.append(localidad.getCodigo());
							lo.append(", ");
						}
						String local = lo.toString();
						//local = local.substring(0, lo.length() - 2);
						propiedades.append(local);
					}else{
						Integer cantDocumentos = documentoVentaRepository.cantDocumentosByPropietario(prop.getId());
						if(cantDocumentos > 0 && prop.getEstado().equals('I')){
							ec.com.propietarios.modelRest.Suscripcion sus = new ec.com.propietarios.modelRest.Suscripcion();
							Integer idPropietario = prop.getId();
							sus.setIdPropietario(idPropietario);
							sus.setEstado(prop.getEstado().toString());
							str.append(prop.getSuscripcion().getNombre() + " [INACTIVO]");
							sus.setSuscripcion(prop.getSuscripcion().getNombre() + " [INACTIVO]");
							suscripcionesList.add(sus);
							str.append(", ");
						}
					}
					
					
				}
				String suscripciones = str.toString();
				if(suscripciones.length() > 0){
					suscripciones = suscripciones.substring(0, str.length() - 2);
					pageRest.setSuscripcion(suscripciones);
				}else{
					pageRest.setSuscripcion("");
				}
				
				
				if(propiedades != null && propiedades.toString().length() > 0){
					String prop = propiedades.toString();
					prop = prop.substring(0, prop.length() - 2);
					pageRest.setLocalidad(prop);
				}else{
					pageRest.setLocalidad("");
				}
			}
			
			if(!suscripcionesList.isEmpty()){
				pageRest.setListaSuscripcion(suscripcionesList);
			}
			
			pageRest.setEstado(propietario.getEstado().toString());
			
			response = utility.SetResponseOwnerCab(status, message, response, HttpStatus.OK.value(), pageRest);
			logger.error(message);
		}catch(Exception e){
			logger.error("Error GetOwnerByIdCab {}", e);
			message = "Error al consultar los propietarios";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PostMapping(path = "/getOwnersCab", consumes = "application/json", produces = "application/json")
	public PagesCab GetOwnersCab(@RequestBody PageQuery obj) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetOwnersCab");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesCab paginas = new PagesCab();
		List<PageCab> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderDetail(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<PropietarioCabecera> pagesTotal;
    		if(obj.getSearch().getValue().equals("")){
    			pagesTotal = propietarioCabeceraRepository.findAll(pageConfig);
    		}else{
    			pagesTotal = utility.listaPagCab(obj.getSearch(), pageConfig, propietarioCabeceraRepository, propietarioRepository, localidadRepository);
    		}
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (PropietarioCabecera propietario : pagesTotal.getContent()) {
				PageCab pageRest = new PageCab();
				pageRest.setId(propietario.getId());
				pageRest.setNombre(propietario.getNombre());
				pageRest.setDireccion(propietario.getDireccion());
				pageRest.setCorreo(propietario.getCorreo());
				pageRest.setTelefono(propietario.getTelefono());
				pageRest.setIdentificacion(propietario.getIdentificacion());
				pageRest.setTipoIdentificacion(propietario.getTipoidentificacion().toString());
				pageRest.setMovil(propietario.getMovil());
				pageRest.setEstado(propietario.getEstado().toString());
				List<Integer> idPropietarios = new ArrayList<>();
				List<Propietario> propList = propietarioRepository.findByPropietariocabecera_Id(propietario.getId());
				if(!propList.isEmpty()){
					StringBuilder str = new StringBuilder();
					StringBuilder propiedades  = new StringBuilder();
					for(Propietario prop: propList){
						Integer idPropietario = prop.getId();
						idPropietarios.add(idPropietario);
						
						List<Localidad> localidades = localidadRepository.findByPropietarioAndSuscripcion(prop.getId(), prop.getSuscripcion());
						if(localidades.size() > 0){
							str.append(prop.getSuscripcion().getNombre());
							str.append(", ");
							
							StringBuilder lo = new StringBuilder();
							for(Localidad localidad: localidades){
								lo.append(localidad.getCodigo());
								lo.append(", ");
							}
							String local = lo.toString();
							//local = local.substring(0, lo.length() - 2);
							propiedades.append(local);
						}
						
						
					}
					String suscripciones = str.toString();
					if(suscripciones.length() > 0){
						suscripciones = suscripciones.substring(0, str.length() - 2);
						pageRest.setSuscripcion(suscripciones);
					}else{
						pageRest.setSuscripcion("");
					}
					
					if(propiedades != null && propiedades.toString().length() > 0){
						String prop = propiedades.toString();
						prop = prop.substring(0, prop.length() - 2);
						pageRest.setLocalidad(prop);
					}else{
						pageRest.setLocalidad("");
					}
					
					
				}
				if(!idPropietarios.isEmpty()){
					pageRest.setIdPropietarios(idPropietarios);
				}
				
				data.add(pageRest);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error GetOwner {}", e);
			message = "Error al consultar los propietarios";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@GetMapping(path = "/getBalanceOwnerCab/{id}",produces = "application/json")
	public ResponseEntity<String> GetBalanceOwnerCab(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetBalanceOwnerCab");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseDeudaCab response = new ResponseDeudaCab();
		DeudaCab deu = new DeudaCab();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		Double deudaTotal = new Double(0);
    		List<DeudaSuscripcion> listSuscripcion = new ArrayList<>();
    		List<Propietario> propietarioList = propietarioRepository.findByPropietariocabecera_Id(id);
    		if(!propietarioList.isEmpty()){
    			for(Propietario prop: propietarioList){
    				List<Localidad> localidades = localidadRepository.findByPropietario(prop.getId());
            		Double deuda = new Double(0);
            		if(!localidades.isEmpty()){
            			for(Localidad localidad: localidades){
            				//List<DocumentoVenta> documentos = documentoVentaRepository.findByIdpropietario_IdAndEstadoAndLocalidad(prop.getId(), 'A', localidad.getCodigo());
                    		Double deudaLocalidad = documentoVentaRepository.findByDeuda(prop.getId(), 'A', localidad.getCodigo());
                    		if(deudaLocalidad > 0){
                    			deuda = new Double(df2.format(deuda + deudaLocalidad)); 
                    			deudaTotal = new Double(df2.format(deudaTotal + deudaLocalidad));
                    		}
                    		/*
                    		if(!documentos.isEmpty()){
                    			for(DocumentoVenta documento: documentos){
                    				deuda = new Double(df2.format(deuda + documento.getSaldo()));
                    				deudaTotal = new Double(df2.format(deudaTotal + documento.getSaldo()));
                    			}
                    		}*/
            			}
            			DeudaSuscripcion deudaSuscripcion = new DeudaSuscripcion();
            			deudaSuscripcion.setSuscripcion(prop.getSuscripcion().getNombre());
            			deudaSuscripcion.setTotal(new Double(df2.format(deuda)));
            			listSuscripcion.add(deudaSuscripcion);
            		}
    			}
    			
    		}
    		deu.setDeuda(deudaTotal);
    		deu.setDeudaSuscripcion(listSuscripcion);
    		
			List<Abonos> abonoList = abonosRepository.findByEstadoAndIdcabecera_id('A', id);
    		if(!abonoList.isEmpty()){
    			Double total = new Double(0);
    			for(Abonos abono: abonoList){
    				total = new Double(df2.format(total + abono.getAbono()));
    			}
    			deu.setSaldoFavor(total);
    		}else{
    			deu.setSaldoFavor(new Double(0));
    		}
    		
    		response = utility.SetResponseDeudaCab(status, message, response, HttpStatus.OK.value(), deu);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Consultar Saldo {}", e);
			status = "ERROR";
			message = "Error al Consultar Saldo ";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/changeOwner", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> ChangeOwner(@RequestBody ChangeOwner request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio ChangeOwner");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Cambio de Propiedad Realizada Correctamente";
		String status ="SUCCESS";
		String detallePropietario="";
		try{
			watch = new StopWatch();
    		watch.start();
    		PropietarioCabecera propietario = propietarioCabeceraRepository.findOne(request.getIdPropietario());
    		if(propietario == null){
				status = "WARNING";
    			message = "Propietario No Existe ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
			}
    		
    		if(!request.getLocalidades().isEmpty()){
    			List<Parametros> parametros = parametrosRepository.findByDescripcion("listaBlanca");
    			
    			for(String localidad: request.getLocalidades()){
    				Localidad local = localidadRepository.findByCodigo(localidad);
    				if(local != null){
    					if(!utility.validationListBlank(parametros, local.getPropietario())){
    						List<DocumentoVenta> documentos = documentoVentaRepository.findByIdpropietario_IdAndEstadoAndLocalidad(local.getPropietario(), 'A', localidad);
        					if(!documentos.isEmpty()){
        						status = "WARNING";
        						Propietario prop = propietarioRepository.findOne(local.getPropietario());
        		    			message = "Propietario Actual " + prop.getNombre() + " tiene deuda, localidad " + local.getCodigo();
        		    			logger.info(message);
        		    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
        					}
    					}
    				}
    			}
    			
    			for(String localidad: request.getLocalidades()){
    				Localidad local = localidadRepository.findByCodigo(localidad);
    				if(local != null){
    					detallePropietario = detallePropietario + propietarioRepository.findOne(local.getPropietario()).getNombre() + " - " + local.getCodigo() + " ";
    					Integer propietarioAnterior = local.getPropietario();
    					Integer idPropietarioNuevo = 0;
    					Integer suscripcion = local.getSuscripcion().getId();
    					HistorialPropietario historial = new HistorialPropietario();
    					historial.setFecha(new Date());
    					historial.setId(historialPropietarioRepository.maxId() + 1);
    					historial.setIdpropietario(local.getPropietario());
    					historial.setLocalidad(local.getCodigo());
    					historialPropietarioRepository.save(historial);
    					
    					Propietario prop = propietarioRepository.findByPropietariocabecera_IdAndSuscripcion_Id(request.getIdPropietario(), suscripcion);
    					
    					if(prop!=null){
    						idPropietarioNuevo = prop.getId();
    						local.setPropietario(prop.getId());
    			    		localidadRepository.save(local);
    					}else{
    						idPropietarioNuevo = propietarioRepository.getNextId() + 1;
    						Propietario propietarioUni = new Propietario();
    						propietarioUni.setId(idPropietarioNuevo);
    						propietarioUni.setNombre(propietario.getNombre());
    						propietarioUni.setCorreo(propietario.getCorreo());
    						propietarioUni.setDireccion(propietario.getDireccion());
    						propietarioUni.setIdentificacion(propietario.getIdentificacion());
    						propietarioUni.setTipoidentificacion(propietario.getTipoidentificacion());
    						propietarioUni.setTelefono(propietario.getTelefono());
    						propietarioUni.setMovil(propietario.getMovil());
    						propietarioUni.setSuscripcion(suscripcionRepository.findOne(suscripcion));
    						propietarioUni.setEstado('A');
    						propietarioUni.setPropietariocabecera(propietario);
    			    		propietarioRepository.save(propietarioUni);
    			    		local.setPropietario(idPropietarioNuevo);
    			    		localidadRepository.save(local);
    					}
    					
    					List<Localidad> localVerificacion = localidadRepository.findByPropietario(propietarioAnterior);
    					if(localVerificacion.isEmpty()){
    						Propietario propietarioAnt = propietarioRepository.findOne(propietarioAnterior);
    						propietarioAnt.setEstado('I');
    						propietarioRepository.save(propietarioAnt);
    					}
    					
    					List<DocumentoVenta> documentos = documentoVentaRepository.findByIdpropietario_IdAndEstadoAndLocalidad(propietarioAnterior, 'A', localidad);
    					if(!documentos.isEmpty()){
    						for(DocumentoVenta doc: documentos){
    							doc.setIdpropietario(propietarioRepository.findOne(idPropietarioNuevo));
    							documentoVentaRepository.save(doc);
    						}
    					}
    				}
    			}
    		}
    		Usuario usuario = usuarioRepository.findOne(idUsuario);
    		Auditoria auditoria = new Auditoria();
    		auditoria.setId(auditoriaRepository.maxId() + 1);
    		auditoria.setFecha(new Date());
    		auditoria.setOpcionpadre("");
    		auditoria.setOpcionhija("");
    		auditoria.setAccion("Cambio de propietario");
    		auditoria.setDetalle("Propietario Anterior: " + detallePropietario + "Propietario Nuevo: " + propietario.getNombre());
    		auditoria.setIdusuario(usuario);
    		auditoria.setJson(ow.writeValueAsString(request));
    		auditoriaRepository.save(auditoria);
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Cambiar Propiedad {}", e);
			status = "ERROR";
			message = "Error al Cambiar Propiedad ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getOwnerCabByName/{nombre}",produces = "application/json")
	public ResponseEntity<String> GetOwnerCabByName(@PathVariable("nombre") String nombre) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetOwnerCabByName");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseName response = new ResponseName();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		List<Item> items = new ArrayList<>();
    		List<PropietarioCabecera> propietarios = propietarioCabeceraRepository.findByNombreContainingIgnoreCase(nombre.toUpperCase());
    		int i=0;
    		if(!propietarios.isEmpty()){
    			for(PropietarioCabecera propietario: propietarios){
    				i++;
    				Item item = new Item();
    				item.setId(propietario.getId());
    				item.setName(propietario.getNombre());
    				items.add(item);
    				if(i == 8){
    					break;
    				}
    			}
    		}
    		response.setIncomplete_results(false);
    		response.setTotal_count(i);
    		response.setItems(items);
			logger.error(message);
		}catch(Exception e){
			logger.error("Error en la Consulta {}", e);
			status = "ERROR";
			message = "Error en la Consulta ";
			return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getLocalidadOwner/{localidad}",produces = "application/json")
	public ResponseEntity<String> GetLocalidadOwner(@PathVariable("localidad") String localidad) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetLocalidadOwner");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseLocalidad response = new ResponseLocalidad();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		List<Item2> items = new ArrayList<>();
    		List<Localidad> localidades = localidadRepository.findByCodigoContainingIgnoreCase(localidad.toUpperCase());
    		int i=0;
    		if(!localidades.isEmpty()){
    			for(Localidad local: localidades){
    				i++;
    				Item2 item = new Item2();
    				item.setId(local.getId());
    				item.setName(local.getCodigo());
    				Propietario prop = propietarioRepository.findOne(local.getPropietario());
    				if(prop!=null){
    					item.setNameOwner(prop.getNombre());
    					item.setIdOwner(prop.getPropietariocabecera().getId());
    				}
    				items.add(item);
    				if(i == 8){
    					break;
    				}
    			}
    		}
    		response.setIncomplete_results(false);
    		response.setTotal_count(i);
    		response.setItems(items);
			logger.error(message);
		}catch(Exception e){
			logger.error("Error an la Consulta {}", e);
			status = "ERROR";
			message = "Error an la Consulta ";
			return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getLocalidadDividida/{localidad}",produces = "application/json")
	public ResponseEntity<String> GetLocalidadDividida(@PathVariable("localidad") String localidad) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetLocalidadDividida");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseLocalidadDividida response = new ResponseLocalidadDividida();
		List<LocalidadDividida> localidades = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		Localidad verificar = localidadRepository.findByCodigo(localidad);
    		if(verificar.getSuscripcion().getId() < 7){
    			status = "ERROR";
    			message = "Seleccionar solo localidades de Suite";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseLocalidadDividida(status, message, response, HttpStatus.OK.value(),null)), HttpStatus.OK);
    		}
    		List<DocumentoVenta> documentos = documentoVentaRepository.findByIdpropietario_IdAndEstadoAndLocalidad(verificar.getPropietario(), 'A', verificar.getCodigo());
			if(!documentos.isEmpty()){
				status = "ERROR";
				Propietario prop = propietarioRepository.findOne(verificar.getPropietario());
    			message = "Propietario Actual " + prop.getNombre() + " tiene deuda, localidad " + verificar.getCodigo();
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseLocalidadDividida(status, message, response, HttpStatus.OK.value(),null)), HttpStatus.OK);
			}
    		
    		String local = localidad.substring(0, localidad.length() - 1);
    		for(int i= 1; i <= 10; i++){
    			Localidad localida = localidadRepository.findByCodigo(local+ i);
    			if(localida != null){
    				LocalidadDividida l = new LocalidadDividida();
    				l.setId(localida.getId());
    				l.setLocalidad(localida.getCodigo());
    				Propietario propietario = propietarioRepository.findOne(localida.getPropietario());
    				if(propietario != null){
    					PropietarioDividido p = new PropietarioDividido();
    					p.setId(propietario.getPropietariocabecera().getId());
    					p.setNombre(propietario.getPropietariocabecera().getNombre());
    					l.setPropietario(p);
    				}
    				if(localida.getSuscripcion() != null){
    					SuscripcionDividida s = new SuscripcionDividida();
    					s.setId(localida.getSuscripcion().getId());
    					s.setNombre(localida.getSuscripcion().getNombre());
    					if(localida.getSuscripcion().getButacas() != null){
    						s.setNumeroButacas(localida.getSuscripcion().getButacas());
    					}else{
    						s.setNumeroButacas(Integer.parseInt(localida.getSuscripcion().getCodigo()));
    					}
    					s.setNumeroTotalButacas(Integer.parseInt(localida.getSuscripcion().getCodigo()));
    					l.setSuscripcion(s);
    				}
    				localidades.add(l);
    			}
    		}
    		
    		response = utility.SetResponseLocalidadDividida(status, message, response, HttpStatus.OK.value(), localidades);
    		
			logger.info(message);
		}catch(Exception e){
			logger.error("Error an la Consulta {}", e);
			status = "ERROR";
			message = "Error an la Consulta ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseLocalidadDividida(status, message, response, HttpStatus.BAD_REQUEST.value(), null)), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getSuscripcionButacas/{butacas}",produces = "application/json")
	public ResponseEntity<String> GetSuscripcionButacas(@PathVariable("butacas") Integer butacas) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetSuscripcionButacas");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseButacas response = new ResponseButacas();
		List<Butacas> butacaList = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		List<Suscripcion> suscripciones = suscripcionRepository.findByCodigo(String.valueOf(butacas));
    		if(!suscripciones.isEmpty()){
    			for(Suscripcion sus: suscripciones){
    				Butacas butaca = new Butacas();
        			butaca.setId(sus.getId());
        			butaca.setNombre(sus.getNombre());
        			butaca.setTotalButacas(Integer.parseInt(sus.getCodigo()));
        			butaca.setNumeroButacas(sus.getButacas());
        			butacaList.add(butaca);
    			}
    			
    		}
    		
    		if(!butacaList.isEmpty()){
    			response.setResponse(butacaList);
    		}
    		response = utility.SetResponseButacas(status, message, response, HttpStatus.OK.value());
    		
			logger.info(message);
		}catch(Exception e){
			logger.error("Error an la Consulta {}", e);
			status = "ERROR";
			message = "Error an la Consulta ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseButacas(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/assignLocalidad", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> AssignLocalidad(@RequestBody AssignLocalidad request) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio AssignLocalidad");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Proceso Ejecutado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		int totalButacas = 0;
    		String local = request.getLocalidad().substring(0, request.getLocalidad().length() - 1);
    		Localidad verificar = localidadRepository.findByCodigo(request.getLocalidad());
    		for(int i= 1; i <= 10; i++){
    			Localidad localida = localidadRepository.findByCodigo(local+ i);
    			if(localida != null){
    				Propietario suscripcion = propietarioRepository.findOne(localida.getPropietario());
    				boolean encontrado = false;
    				for(int c=1; c <= request.getAsignaciones().size(); c++){
    					if(suscripcion.getPropietariocabecera().getId().equals(request.getAsignaciones().get(c-1).getIdPropietario())){
    						encontrado =true;
    					}
    	    			if(suscripcion.getPropietariocabecera().getId().equals(request.getAsignaciones().get(c-1).getIdPropietario()) && !localida.getSuscripcion().getId().equals(request.getAsignaciones().get(c-1).getIdSuscripcion())){
    	    				List<DocumentoVenta> documentos = documentoVentaRepository.findByIdpropietario_IdAndEstadoAndLocalidad(suscripcion.getId(), 'A', localida.getCodigo());
    	    				if(!documentos.isEmpty()){
    	    					status = "ERROR";
    	    	    			message = "Propietario implicado a cambios " + suscripcion.getNombre() + " tiene deuda, localidad " + localida.getCodigo();
    	    	    			logger.info(message);
    	    	    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    	    				}
    	    			}
    				}
    				
    				if(encontrado == false){
    					List<DocumentoVenta> documentos = documentoVentaRepository.findByIdpropietario_IdAndEstadoAndLocalidad(suscripcion.getId(), 'A', localida.getCodigo());
	    				if(!documentos.isEmpty()){
	    					status = "ERROR";
	    	    			message = "Propietario implicado a cambios " + suscripcion.getNombre() + " tiene deuda, localidad " + localida.getCodigo();
	    	    			logger.info(message);
	    	    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
	    				}
    				}
    			}
			}

			int duenios=0;
			totalButacas = Integer.parseInt(verificar.getSuscripcion().getCodigo());
			for(int i= 1; i <= 10; i++){
    			Localidad localida = localidadRepository.findByCodigo(local+ i);
    			if(localida != null){
    				duenios = duenios +1;
    			}
			}
			if(duenios < 2 && request.getAsignaciones().size() < 2){
				status = "ERROR";
    			message = "No puede cambiar el dueño de la localidad, use cambio de propietario";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
			}
    		int sumatoriaButacas = 0;
			for(int i=1; i <= request.getAsignaciones().size(); i++){
				Suscripcion sus = suscripcionRepository.findOne(request.getAsignaciones().get(i-1).getIdSuscripcion());
				sumatoriaButacas = sumatoriaButacas + sus.getButacas();
			}
			
			if(sumatoriaButacas != totalButacas){
				status = "ERROR";
    			message = "El total de butacas divididas debe ser igual al número de butacas de la suscripcion inicial";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
			}
    		for(int i= 1; i <= 10; i++){
    			Localidad localida = localidadRepository.findByCodigo(local+ i);
    			if(localida != null){
    				Propietario propietario = propietarioRepository.findByIdAndSuscripcion_Id(localida.getPropietario(), localida.getSuscripcion().getId());
    				Integer cant = localidadRepository.findByCantidad(localida.getPropietario(), localida.getSuscripcion().getId());
    				if(cant < 2){
    					propietario.setEstado('I');
    					propietarioRepository.save(propietario);
    				}
    				localidadRepository.delete(localida);
    			}
    		}
    		
    		for(int i=1; i <= request.getAsignaciones().size(); i++){
    			PropietarioCabecera propietario = propietarioCabeceraRepository.findOne(request.getAsignaciones().get(i-1).getIdPropietario());
    			Integer idPropietarioNuevo = 0;
    			Propietario suscripcion = propietarioRepository.findByPropietariocabecera_IdAndSuscripcion_Id(request.getAsignaciones().get(i-1).getIdPropietario(), request.getAsignaciones().get(i-1).getIdSuscripcion());
    			if(suscripcion != null){
    				idPropietarioNuevo = suscripcion.getId();
    				suscripcion.setEstado('A');
    				propietarioRepository.save(suscripcion);
    			}else{
    				idPropietarioNuevo = propietarioRepository.getNextId() + 1;
					Propietario propietarioUni = new Propietario();
					propietarioUni.setId(idPropietarioNuevo);
					propietarioUni.setNombre(propietario.getNombre());
					propietarioUni.setCorreo(propietario.getCorreo());
					propietarioUni.setDireccion(propietario.getDireccion());
					propietarioUni.setIdentificacion(propietario.getIdentificacion());
					propietarioUni.setTipoidentificacion(propietario.getTipoidentificacion());
					propietarioUni.setTelefono(propietario.getTelefono());
					propietarioUni.setMovil(propietario.getMovil());
					propietarioUni.setSuscripcion(suscripcionRepository.findOne(request.getAsignaciones().get(i-1).getIdSuscripcion()));
					propietarioUni.setEstado('A');
					propietarioUni.setPropietariocabecera(propietario);
		    		propietarioRepository.save(propietarioUni);
    			}
    			
    			Localidad localidad = new Localidad();
    			localidad.setId(localidadRepository.getNextId() + 1);
    			localidad.setCodigo(local+i);
    			localidad.setPropietario(idPropietarioNuevo);
    			Suscripcion sus = suscripcionRepository.findOne(request.getAsignaciones().get(i-1).getIdSuscripcion());
    			localidad.setSuscripcion(sus);
    			localidadRepository.save(localidad);
    		}
    		
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Cambiar Propiedad {}", e);
			status = "ERROR";
			message = "Error al Cambiar Propiedad ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PostMapping(path = "/getPreviewOrder", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> GetPreviewOrder(@RequestBody OrderProduct request) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetPreviewOrder");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		Documents documento = new Documents();
		ResponseDocument response = new ResponseDocument();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		
    		Parametros direccion = parametrosRepository.findOne(2);
    		Parametros sucursal = parametrosRepository.findOne(3);
    		Parametros correo = parametrosRepository.findOne(1);
    		Parametros codigoFactura = parametrosRepository.findOne(5);
    		Parametros telefono = parametrosRepository.findOne(6);
    		Parametros iva = parametrosRepository.findOne(7);
    		Parametros numeroFactura = parametrosRepository.findOne(8);
    		TipoDocumento tipoDocumento = tipoDocumentoRepository.findOne(1);
    		Integer idDocumento = documentoVentaRepository.maxId();
    		Integer secuencia = documentoVentaRepository.maxSecuencia();
    		
    		Localidad localidad = localidadRepository.findByCodigo(request.getLocalidad());
			if(localidad == null){
				status = "ERROR";
    			message = "No existe la Localidad";
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseDocument(status, message, response, HttpStatus.BAD_REQUEST.value(), null)), HttpStatus.BAD_REQUEST);
			}
			Propietario propietario = propietarioRepository.findOne(localidad.getPropietario());

					logger.info("Creando Documento Localidad " + localidad.getCodigo());
					//List<Producto> productos = (List<Producto>) localidad.getSuscripcion().getProductoCollection();
					if(request.getProductos().isEmpty()){
						status = "ERROR";
		    			message = "No hay productos";
		    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseDocument(status, message, response, HttpStatus.BAD_REQUEST.value(), null)), HttpStatus.BAD_REQUEST);
					}
					List<DetalleDocumento> listDetalle = new ArrayList<>();
					idDocumento = idDocumento + 1;
					secuencia = secuencia + 1;
					DocumentoVenta documentos = new DocumentoVenta();
					Double saldo = new Double(0);
					Double saldosinIva = new Double(0);
			
						int i=1;
						for(Product producto: request.getProductos()){
							DetalleDocumento detalle = new DetalleDocumento();
							DetalleDocumentoPK pk = new DetalleDocumentoPK();
	    					detalle.setCantidad(producto.getCantidad());
	    					detalle.setDescuento(new Double(0));
	    					pk.setLinea(i);
	    					pk.setId(idDocumento);
	    					detalle.setDetalleDocumentoPK(pk);
	    					if(producto.getProducto().contains("ALÍCUOTA")){
	    						detalle.setProducto(producto.getProducto() + " " + utility.GetMes(request.getMes()) + " " + request.getAnio());
	    					}else{
	    						detalle.setProducto(producto.getProducto());
	    					}
	    						
	    					detalle.setPorcentajeiva(new Double(iva.getValor1()));
	    					detalle.setPreciounitario(producto.getPrecioUnitario());
	    					detalle.setValoriva(new Double(0));
	    					saldosinIva = saldosinIva + (detalle.getCantidad() * detalle.getPreciounitario());
	    					saldo = saldo + (detalle.getCantidad() * detalle.getPreciounitario() + detalle.getValoriva());
	    					listDetalle.add(detalle);
	    					i++;
						}
					
					
					documentos.setId(idDocumento);
					documentos.setCorreo(correo.getDato1());
					documentos.setDescuento(new Double(0));
					documentos.setDetalleDocumentoCollection(listDetalle);
					documentos.setDireccion(direccion.getDato1());
					documentos.setEstado('A');
					String fecha = request.getAnio() + "-" + utility.GetMesNumber(request.getMes())+"-01";  
					Date fechaCreacion=new SimpleDateFormat("yyyy-MM-dd").parse(fecha); 
					documentos.setFechacreacion(fechaCreacion);
					Calendar calendar = Calendar.getInstance();
				    calendar.setTime(fechaCreacion); 
				    calendar.add(Calendar.DAY_OF_YEAR, 7);  
				    documentos.setFechavencimiento(calendar.getTime());
				    documentos.setIdpropietario(propietario);
				    documentos.setLocalidad(localidad.getCodigo());
				    documentos.setSecuencia(secuencia);
				    documentos.setNumero(numeroFactura.getDato1() + documentos.getSecuencia());
				    documentos.setReferencia(codigoFactura.getDato1() + documentos.getId());
				    documentos.setSucursal(sucursal.getDato1());
				    documentos.setTelefono(telefono.getDato1());
				    documentos.setTipodocumento(tipoDocumento);
				    documentos.setTipoidentificacion(propietario.getTipoidentificacion());
				    documentos.setValoriva(new Double(0));
				    documentos.setSubtotalconiva(new Double(df2.format(saldo)));
				    documentos.setSubtotalsiniva(new Double(df2.format(saldosinIva)));
				    documentos.setSaldo(new Double(df2.format(saldo)));
    		
    		

			documento.setId(documentos.getId());
			documento.setCorreo(documentos.getCorreo());
			documento.setDescuento(documentos.getDescuento());
			documento.setDireccion(documentos.getDireccion());
			documento.setEstado(documentos.getEstado());
			documento.setFechacreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
			documento.setFechavencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
			documento.setIdpropietario(documentos.getIdpropietario().getId());
			documento.setLocalidad(documentos.getLocalidad());
			documento.setNombreropietario(documentos.getIdpropietario().getNombre());
			documento.setNumero(documentos.getNumero());
			documento.setReferencia(documentos.getReferencia());
			List<Abonos> abonoList = abonosRepository.findByEstadoAndIdcabecera_id('A', documentos.getIdpropietario().getPropietariocabecera().getId());
			if(!abonoList.isEmpty()){
    			Double total = new Double(0);
    			for(Abonos abono: abonoList){
    				total = new Double(df2.format(total + abono.getAbono()));
    			}
    			documento.setSaldoFavor(total);
    		}else{
    			documento.setSaldoFavor(new Double(0));
    		}
			
			List<Pago> pagos = pagoRepository.findByIddocumento_id(documentos.getId());
			if(pagos.isEmpty()){
				documento.setTotalPagado(new Double(0));
				//documento.setSaldo(documentos.getSaldo());
			}else{
				List<String> pagoList = new ArrayList<>();
				Double suma= new Double(0);
				String observacion = "N/A";
				for(Pago pago: pagos){
					documento.setFechaPago(new SimpleDateFormat("dd-MM-yyyy").format(pago.getFechapago()));
					if(pago.getValortotal() == 0){
						suma = new Double(df2.format(suma + new Double(pago.getObservacion())));
					}else{
						suma = new Double(df2.format(suma + pago.getValortotal()));
						observacion = pago.getObservacion();
					}
					
					Abonos abonoPago = abonosRepository.findByPago(documentos.getIdpropietario().getPropietariocabecera().getId(), pago.getId());
					if(abonoPago!=null){
						suma = new Double(df2.format(suma + abonoPago.getAniadido()));
					}
					pagoList.add(pago.getIdtipopago().getDescripcion() + " - " + observacion);
					
				}
				
				documento.setTotalPagado(new Double(df2.format(suma)));
				documento.setTipoPago(pagoList);
				//documento.setSaldo(documentos.getSaldo() - pago.getValortotal());
			}
			documento.setSaldo(new Double(df2.format(documentos.getSaldo())));
			documento.setValoriva(documentos.getValoriva());
			documento.setSecuencia(documentos.getSecuencia());
			documento.setSubtotalconiva(documentos.getSubtotalconiva());
			documento.setSubtotalsiniva(documentos.getSubtotalsiniva());
			documento.setSucursal(documentos.getSucursal());
			documento.setTelefono(documentos.getTelefono());
			documento.setTipodocumento(documentos.getTipodocumento().getNombre());
			documento.setTipoidentificacion(documentos.getTipoidentificacion());
			List<Detalle> listDetalles = new ArrayList<>();
			for(DetalleDocumento detalles: documentos.getDetalleDocumentoCollection()){
				Detalle detalle = new Detalle();
				detalle.setId(detalles.getDetalleDocumentoPK().getId());
				detalle.setCantidad(detalles.getCantidad());
				detalle.setPrecioUnitario(detalles.getPreciounitario());
				detalle.setDescuento(detalles.getDescuento());
				detalle.setLinea(detalles.getDetalleDocumentoPK().getLinea());
				detalle.setPorcentajeiva(detalles.getPorcentajeiva());
				detalle.setProducto(detalles.getProducto());
				detalle.setSubtotal(new Double(df2.format((detalles.getPreciounitario()) * detalles.getCantidad())));
				detalle.setValoriva(detalles.getValoriva());
				listDetalles.add(detalle);
			}
			if(listDetalles != null){
				documento.setDetalle(listDetalles);
			}
			
			
			response = utility.SetResponseDocument(status, message, response, HttpStatus.OK.value(), documento);
			logger.error(message);
		}catch(Exception e){
			logger.error("Error GetDocumentById {}", e);
			message = "Error al consultar el documento";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PostMapping(path = "/createConvenio", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> CreateConvenio(@RequestBody CreateConvenio request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio CreateConvenio");
		String message="Convenio creado Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseGeneric response = new ResponseGeneric();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		int i=0;
    		String propietario = "";
    		StringTokenizer st = new StringTokenizer(request.getDocumentos(),"-");  
    		
    	     while (st.hasMoreTokens()) {
    	    	Integer id = Integer.parseInt(st.nextToken());
    			DocumentoVenta documento = documentoVentaRepository.findOne(id);
    			if(i == 0){
    				propietario = documento.getIdpropietario().getNombre();
    				i++;
    			}
    			if(documento.getEstado().equals('P') || (!propietario.equals(documento.getIdpropietario().getNombre()))){
    				status = "ERROR";
        			message = "Debe escoger documentos del mismo Propietario o documentos No Pagados";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    		}
    	    PropietarioCabecera propietarioCabecera = propietarioCabeceraRepository.findOne(request.getPropietario());
    	    Localidad localidad = localidadRepository.findOne(request.getLocalidad());
    		Convenio convenio = new Convenio();
    		convenio.setId(convenioRepository.maxId() + 1);
    		convenio.setEstado('A');
    		convenio.setPropietariocabecera(propietarioCabecera);
    		convenio.setLocalidad(localidad);
    		convenio.setTotalmeses(request.getTotalMeses());
    		convenio.setMesactual(0);
    		convenio.setFechacreacion(new Date());
    		Calendar calendar = Calendar.getInstance();
		    calendar.setTime(new Date()); 
		    calendar.add(Calendar.DAY_OF_MONTH, request.getTotalMeses() + 1);  
		    convenio.setFechavencimiento(calendar.getTime());
    		List<DocumentoVenta> documentos = new ArrayList<>();
    		st = new StringTokenizer(request.getDocumentos(),"-");  
    		Double valorTotal = new Double(0);
    		Double valorMensual = new Double(0);
    		while (st.hasMoreTokens()) {
    			Integer id = Integer.parseInt(st.nextToken());
    			DocumentoVenta documento = documentoVentaRepository.findOne(id);
    			if(documento != null){
    				valorTotal = new Double(df2.format(valorTotal + documento.getSaldo()));
    				documentos.add(documento);
    				documento.setEstado('O');
    				documentoVentaRepository.save(documento);
    			}
    		}
    		valorMensual = new Double(df2.format(valorTotal / request.getTotalMeses()));
    		convenio.setValortotal(valorTotal);
    		convenio.setValormensual(valorMensual);
    		convenio.setDocumentoVentaCollection(documentos);
			convenioRepository.save(convenio);
			
			Usuario usuario = usuarioRepository.findOne(idUsuario);
			Auditoria auditoria = new Auditoria();
			auditoria.setId(auditoriaRepository.maxId() + 1);
			auditoria.setFecha(new Date());
			auditoria.setOpcionpadre("");
			auditoria.setOpcionhija("");
			auditoria.setAccion("Crear Convenio");
			auditoria.setDetalle("Propietario: " + propietarioCabecera.getNombre() + " Localidad: " + convenio.getLocalidad() + " Valor Total: " + convenio.getValortotal() + " Valor Por Mes: " + convenio.getValormensual() + " Cantidad de Meses: " + convenio.getTotalmeses());
			auditoria.setIdusuario(usuario);
			auditoria.setJson(ow.writeValueAsString(request));
			auditoriaRepository.save(auditoria);
			
			response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.error(message);
		}catch(Exception e){
			logger.error("Error getDocumentsByList {}", e);
			message = "Error al consultar el documento";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PostMapping(path = "/getDocumentsByLocalidad/{idCabecera}/{localidad}", consumes = "application/json", produces = "application/json")
	public PagesDocuments GetDocumentsByLocalidad(@RequestBody PageQuery obj, @PathVariable("idCabecera") Integer idCabecera, @PathVariable("localidad") String localidad) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetDocumentsByLocalidad");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesDocuments paginas = new PagesDocuments();
		List<Documents> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderDocument(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		//Page<DocumentoVenta> pagesTotal = documentoVentaRepository.findByIdpropietario_Id(id, pageConfig);
    		Page<DocumentoVenta> pagesTotal;
    		pagesTotal = utility.listaPaginasDocumentLocalidad(obj.getSearch(), pageConfig, documentoVentaRepository, idCabecera, localidad);
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (DocumentoVenta documentos : pagesTotal.getContent()) {
				Documents documento = new Documents();
				documento.setId(documentos.getId());
				documento.setCorreo(documentos.getCorreo());
				documento.setDescuento(documentos.getDescuento());
				documento.setDireccion(documentos.getDireccion());
				documento.setEstado(documentos.getEstado());
				documento.setFechacreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
				documento.setFechavencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
				documento.setIdpropietario(documentos.getIdpropietario().getId());
				documento.setLocalidad(documentos.getLocalidad());
				documento.setNombreropietario(documentos.getIdpropietario().getNombre());
				documento.setNumero(documentos.getNumero());
				documento.setReferencia(documentos.getReferencia());
				documento.setSaldo(new Double(df2.format(documentos.getSaldo())));
				documento.setSecuencia(documentos.getSecuencia());
				documento.setSubtotalconiva(documentos.getSubtotalconiva());
				documento.setSubtotalsiniva(documentos.getSubtotalsiniva());
				documento.setSucursal(documentos.getSucursal());
				documento.setTelefono(documentos.getTelefono());
				documento.setTipodocumento(documentos.getTipodocumento().getNombre());
				documento.setTipoidentificacion(documentos.getTipoidentificacion());
				List<Detalle> listDetalles = new ArrayList<>();
				for(DetalleDocumento detalles: documentos.getDetalleDocumentoCollection()){
					Detalle detalle = new Detalle();
					detalle.setId(detalles.getDetalleDocumentoPK().getId());
					detalle.setCantidad(detalles.getCantidad());
					detalle.setDescuento(detalles.getDescuento());
					detalle.setLinea(detalles.getDetalleDocumentoPK().getLinea());
					detalle.setPorcentajeiva(detalles.getPorcentajeiva());
					detalle.setProducto(detalles.getProducto());
					detalle.setSubtotal(new Double(df2.format((detalles.getPreciounitario() + detalles.getValoriva() - detalles.getDescuento()) * detalles.getCantidad())));
					detalle.setValoriva(detalles.getValoriva());
					listDetalles.add(detalle);
				}
				if(listDetalles != null){
					documento.setDetalle(listDetalles);
				}
				if(documentos.getEstado().equals('P')){
					List<Pago> pagos = pagoRepository.findByIddocumento_id(documentos.getId());
					if(pagos.isEmpty()){
						Ordernes orden = ordenesRepository.findByFacturas(documentos.getReferencia());
						if(orden != null){
							if(orden.getFacturasPagosFechaDePago() != null){
								documento.setFechaPago(orden.getFacturasPagosFechaDePago().replace('/', '-'));
							}else{
								documento.setFechaPago("");
							}
							
						}else{
							documento.setFechaPago("");
						}
					}else{
						for(Pago pago: pagos){
							documento.setFechaPago(new SimpleDateFormat("dd-MM-yyyy").format(pago.getFechapago()));
						}
					}
				}
				data.add(documento);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error GetOwner {}", e);
			message = "Error al consultar los documentos";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@GetMapping(path = "/getLocalidadByCab/{id}",produces = "application/json")
	public ResponseEntity<String> GetLocalidadByCab(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetLocalidadByCab");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseLocalidadCab response = new ResponseLocalidadCab();
		List<LocalidadCab> localidad = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		List<Propietario> suscripciones = propietarioRepository.findByPropietariocabecera_Id(id);
    		
    		if(!suscripciones.isEmpty()){
    			for(Propietario suscripcion: suscripciones){
    				List<Localidad> localidades = localidadRepository.findByPropietario(suscripcion.getId());
    				if(!localidades.isEmpty()){
    					for(Localidad l: localidades){
    						LocalidadCab local = new LocalidadCab();
    						local.setId(l.getId());
    						local.setLocalidad(l.getCodigo());
    						localidad.add(local);
    					}
    					
    				}
    			}
    		}
    		
    		
    		response = utility.SetResponseLocalidadCab(status, message, response, HttpStatus.OK.value(), localidad);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Consultar Saldo {}", e);
			status = "ERROR";
			message = "Error al Consultar Saldo ";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getConvenio/{id}",produces = "application/json")
	public ResponseEntity<String> GetConvenio(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetConvenio");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseConvenioCab response = new ResponseConvenioCab();
		List<ConvenioCab> convenioList = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		List<Convenio> convenios = convenioRepository.findByPropietariocabecera_id(id);
    		if(!convenios.isEmpty()){
    			for(Convenio convenio: convenios){
    				ConvenioCab c = new ConvenioCab();
    				c.setId(convenio.getId());
    				c.setEstado(convenio.getEstado().toString());
    				c.setFechaCreacion(convenio.getFechacreacion());
    				c.setFechaVencimiento(convenio.getFechavencimiento());
    				c.setMeses(convenio.getTotalmeses());
    				c.setMesVigente(convenio.getMesactual());
    				c.setValorTotal(convenio.getValortotal());
    				c.setValorPorMes(convenio.getValormensual());
    				c.setLocalidad(convenio.getLocalidad().getCodigo());
    				convenioList.add(c);
    			}
    		}
    		
    		response = utility.SetResponseConvenioCab(status, message, response, HttpStatus.OK.value(), convenioList);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Consultar Convenio {}", e);
			status = "ERROR";
			message = "Error al Consultar Convenio ";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PostMapping(path = "/getAuditoria/{fecha}", consumes = "application/json", produces = "application/json")
	public PagesAuditoria GetAuditoria(@RequestBody PageQuery obj, @PathVariable("fecha") String fecha) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetAuditoria");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesAuditoria paginas = new PagesAuditoria();
		List<PageAuditoria> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderAuditoria(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue()/*, sort*/);
    		Page<Auditoria> pagesTotal; 
    	    //Date date=new SimpleDateFormat("yyyy-MM-dd").parse(fecha);
    		if(obj.getSearch().getValue().equals("")){
    			pagesTotal = auditoriaRepository.findByFecha("%"+fecha+"%",pageConfig);
    		}else{
    			pagesTotal = utility.listaPaginasAuditoria(obj.getSearch(), pageConfig, auditoriaRepository, usuarioRepository, "%"+fecha+"%");
    		}
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (Auditoria audi : pagesTotal.getContent()) {	
				PageAuditoria pageAuditoria= new PageAuditoria();
				pageAuditoria.setId(audi.getId());
				pageAuditoria.setAccion(audi.getAccion());
				pageAuditoria.setDetalle(audi.getDetalle());
				pageAuditoria.setFecha(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(audi.getFecha()));
				pageAuditoria.setIdUsuario(audi.getIdusuario().getId());
				pageAuditoria.setNombreUsuario(audi.getIdusuario().getNombre());
				data.add(pageAuditoria);
			}
			paginas.setData(data);
		}catch(Exception e){
			logger.error("Error en la Ejecucion {}", e);
			status = "ERROR";
			message = "Error en la Ejecucion ";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	
	@Transactional
	@PostMapping(path = "/createCase", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> CreateCase(@RequestBody CreateCase request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio CreateCase");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		CasosEspeciales caso = new CasosEspeciales();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Caso Creado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(request.getCaso().equals("") || request.getSolucion().equals("")){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		Usuario usuario = usuarioRepository.findOne(idUsuario);
    		caso.setId(casosEspecialesRepository.maxId() + 1);
    		caso.setCaso(request.getCaso());
    		caso.setSolucion(request.getSolucion());
    		caso.setEstado('A');
    		caso.setFecha(new Date());
    		caso.setIdusuario(usuario);
    		casosEspecialesRepository.save(caso);
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Crear Caso {}", e);
			status = "ERROR";
			message = "Error al Crear Caso ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/updateCase", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> UpdateCase(@RequestBody UpdateCase request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio UpdateCase");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		CasosEspeciales caso = new CasosEspeciales();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Caso Actualizado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(request.getCaso().equals("") || request.getSolucion().equals("")){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		caso = casosEspecialesRepository.findOne(request.getId());
    		
    		if(caso == null){
    			status = "ERROR";
    			message = "No Existe Caso";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		if(!idUsuario.equals(caso.getIdusuario().getId())){
    			status = "WARNING";
    			message = "Solo el creador del caso puede actualizarlo";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		caso.setCaso(request.getCaso());
    		caso.setSolucion(request.getSolucion());
    		casosEspecialesRepository.save(caso);

    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Actualizar Caso {}", e);
			status = "ERROR";
			message = "Error al Actualizar Caso ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@GetMapping(path = "/getCase/{id}", produces = "application/json")
	public ResponseEntity<String> GetCase(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetCase");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseCase response = new ResponseCase();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		
    		CasosEspeciales caso = casosEspecialesRepository.findOne(id);
    		if(caso == null){
    			status = "ERROR";
    			message = "No Existe Caso";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseCase(status, message, response, HttpStatus.OK.value(), null)), HttpStatus.OK);
    		}
    		
    		GetCase getCase = new GetCase();
			getCase.setCaso(caso.getCaso());
			getCase.setEstado(caso.getEstado().toString());
			getCase.setId(caso.getId());
			getCase.setSolucion(caso.getSolucion());
			getCase.setUsuario(caso.getIdusuario().getNombre());
			getCase.setFecha(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(caso.getFecha()));
			List<Usuario> lista = (List<Usuario>) caso.getUsuarioCollection();
			List<String> aprobado = new ArrayList<>();
			if(!lista.isEmpty()){
				for(Usuario user: lista){
					String usuarioAprobado = user.getNombre();
					aprobado.add(usuarioAprobado);
				}
				getCase.setAprobado(aprobado);
			}
			List<Comentario> comentarioList = new ArrayList<>();
			if(!caso.getComentariosCollection().isEmpty()){
				
				List<Comentarios> comentarios = (List<Comentarios>) caso.getComentariosCollection();
				for(Comentarios co: comentarios){
					if(co.getEstado().equals('A')){
						Comentario comentario = new Comentario();
						comentario.setId(co.getId());
						comentario.setComentario(co.getComentario());
						comentario.setEstado(co.getEstado().toString());
						comentario.setFecha(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(co.getFecha()));
						comentario.setIdUsuario(co.getIdusuario().getId());
						comentario.setUsuario(co.getIdusuario().getNombre());
						comentarioList.add(comentario);
					}
					
				}
				if(!comentarioList.isEmpty()){
					getCase.setComentarios(comentarioList);
				}
				
				
			}else{
				getCase.setComentarios(comentarioList);
			}
			response = utility.SetResponseCase(status, message, response, HttpStatus.OK.value(), getCase);
			logger.error(message);
		}catch(Exception e){
			logger.error("Error al consultar el documento {}", e);
			message = "Error al consultar el documento";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseCase(status, message, response, HttpStatus.BAD_REQUEST.value(),null)), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/approveCase/{idCaso}", produces = "application/json")
	public ResponseEntity<String> ApproveCase(@PathVariable("idCaso") Integer idCaso, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio ApproveCase");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		CasosEspeciales caso = new CasosEspeciales();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Caso Aprobado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(idCaso < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		caso = casosEspecialesRepository.findOne(idCaso);
    		if(caso != null){
    			if(!caso.getEstado().equals('A')){
    				status = "WARNING";
        			message = "Caso ya ha sido aprobado";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    			List<Usuario> usuarios = new ArrayList<>();
    			usuarios = (List<Usuario>) caso.getUsuarioCollection();
    			Usuario usuario = usuarioRepository.findOne(idUsuario);
    			usuarios.add(usuario);
    			caso.setUsuarioCollection(usuarios);
    			caso.setEstado('C');
        		casosEspecialesRepository.save(caso);
    		}else{
    			status = "ERROR";
    			message = "No Existe Caso";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}

    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Aprobar Caso {}", e);
			status = "ERROR";
			message = "Error al Aprobar Caso ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PostMapping(path = "/getCasePage/{estado}", consumes = "application/json", produces = "application/json")
	public PagesCase GetCasePage(@RequestBody PageQuery obj, @PathVariable("estado") String estado) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetCasePage");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesCase paginas = new PagesCase();
		List<PageCase> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderCase(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<CasosEspeciales> pagesTotal; 
    		if(obj.getSearch().getValue().equals("")){
    			if(estado.equals("ALL")){
    				pagesTotal = casosEspecialesRepository.findAll(pageConfig);
    			}else{
    				pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue()/*, sort*/);
    				pagesTotal = casosEspecialesRepository.findByAllEstado(estado.charAt(0),pageConfig);
    			}
    			
    		}else{
    			pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue()/*, sort*/);
    			if(estado.equals("ALL")){
    				pagesTotal = utility.listaPaginasCasos(obj.getSearch(), pageConfig, casosEspecialesRepository, usuarioRepository);
    			}else{
    				pagesTotal = utility.listaPaginasCasosEstado(obj.getSearch(), pageConfig, casosEspecialesRepository, usuarioRepository, estado.charAt(0));
    			}
    			
    		}
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (CasosEspeciales cases : pagesTotal.getContent()) {	
				PageCase pageCase= new PageCase();
				pageCase.setId(cases.getId());
				pageCase.setEstado(cases.getEstado().toString());
				pageCase.setCaso(cases.getCaso());
				pageCase.setSolucion(cases.getSolucion());
				if(!cases.getUsuarioCollection().isEmpty()){
					List<String> list = new ArrayList<>();
					List<Usuario> users = (List<Usuario>) cases.getUsuarioCollection();
					if(!users.isEmpty()){
						for(Usuario user: users){
							list.add(user.getNombre());
						}
						pageCase.setAprobado(list);
					}
					
				}
				pageCase.setFecha(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(cases.getFecha()));
				pageCase.setIdUsuario(cases.getIdusuario().getId());
				pageCase.setNombreUsuario(cases.getIdusuario().getNombre());
				List<Comentario> comentarioList = new ArrayList<>();
				if(!cases.getComentariosCollection().isEmpty()){
					List<Comentarios> comentarios = (List<Comentarios>) cases.getComentariosCollection();
					for(Comentarios co: comentarios){
						if(co.getEstado().equals('A')){
							Comentario comentario = new Comentario();
							comentario.setId(co.getId());
							comentario.setComentario(co.getComentario());
							comentario.setEstado(co.getEstado().toString());
							comentario.setFecha(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(co.getFecha()));
							comentario.setIdUsuario(co.getIdusuario().getId());
							comentario.setUsuario(co.getIdusuario().getNombre());
							comentarioList.add(comentario);
						}
					}
					if(!comentarioList.isEmpty()){
						pageCase.setComentarios(comentarioList);
					}
					
					
				}else{
					pageCase.setComentarios(comentarioList);
				}
				data.add(pageCase);
			}
			paginas.setData(data);
		}catch(Exception e){
			logger.error("Error en la Ejecucion {}", e);
			status = "ERROR";
			message = "Error en la Ejecucion ";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	
	@Transactional
	@PostMapping(path = "/createComment", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> CreateComment(@RequestBody CreateComment request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio CreateComment");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		Comentarios comentario = new Comentarios();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Comentario Creado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(request.getComentario().equals("") || request.getIdCaso() < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		Usuario usuario = usuarioRepository.findOne(idUsuario);
    		comentario.setId(comentariosRepository.maxId() + 1);
    		comentario.setComentario(request.getComentario());
    		comentario.setEstado('A');
    		comentario.setFecha(new Date());
    		comentario.setIdusuario(usuario);
    		
    		comentariosRepository.save(comentario);
    		
    		CasosEspeciales caso = casosEspecialesRepository.findOne(request.getIdCaso());
    		List<Comentarios> list = (List<Comentarios>) caso.getComentariosCollection();
    		if(list != null){
    			list.add(comentario);
    			caso.setComentariosCollection(list);
    			casosEspecialesRepository.save(caso);
    		}else{
    			List<Comentarios> lista = new ArrayList<>();
    			lista.add(comentario);
    			caso.setComentariosCollection(lista);
    			casosEspecialesRepository.save(caso);
    		}
    		
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Crear Comentario {}", e);
			status = "ERROR";
			message = "Error al Crear Comentario ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/updateComment", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> UpdateComment(@RequestBody UpdateComment request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio UpdateComment");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		Comentarios comentario = new Comentarios();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Comentario Actualizado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(request.getComentario().equals("") || request.getIdComentario() < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		comentario = comentariosRepository.findOne(request.getIdComentario());
    		if(comentario == null){
    			status = "WARNING";
    			message = "Comentario No Existe ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		if(!comentario.getIdusuario().getId().equals(idUsuario)){
    			status = "WARNING";
    			message = "Solo el creador del comentario puede modificarlo";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		comentario.setComentario(request.getComentario());
    		comentario.setFecha(new Date());
    		comentariosRepository.save(comentario);
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Actualizar Comentario {}", e);
			status = "ERROR";
			message = "Error al Actualizar Comentario ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@DeleteMapping(path = "/deleteComment/{idComentario}", produces = "application/json")
	public ResponseEntity<String> DeleteComment(@PathVariable("idComentario") Integer idComentario, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio DeleteComment");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		Comentarios comentario = new Comentarios();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Comentario Eliminado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		
    		comentario = comentariosRepository.findOne(idComentario);
    		if(comentario == null){
    			status = "WARNING";
    			message = "Comentario No Existe ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		if(!comentario.getIdusuario().getId().equals(idUsuario)){
    			status = "WARNING";
    			message = "Solo el creador del comentario puede eliminarlo";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		comentario.setEstado('I');
    		comentariosRepository.save(comentario);
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Eliminar Comentario {}", e);
			status = "ERROR";
			message = "Error al Eliminar Comentario ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PostMapping(path = "/getCards/{busqueda}", consumes = "application/json", produces = "application/json")
	public PagesCard GetCards(@RequestBody PageQuery obj, @PathVariable("busqueda") String busqueda) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetCards");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesCard paginas = new PagesCard();
		List<PageCard> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		
    		ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderCard(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<Tarjetas> pagesTotal; 
    		
    		pagesTotal = tarjetasRepository.findByIdlocalidad_Codigo(busqueda, pageConfig);

    		if(pagesTotal.getTotalElements() < 1){
    			List<String> localidades = new ArrayList<>();
        		List<Propietario> suscripciones = propietarioRepository.findByPropietariocabecera_Id(Integer.parseInt(busqueda));
        		if(!suscripciones.isEmpty()){
        			for(Propietario suscripcion: suscripciones){
        				List<Localidad> localityList = localidadRepository.findByPropietario(suscripcion.getId());
        				if(!localityList.isEmpty()){
        					for(Localidad local: localityList){
        						localidades.add(local.getCodigo());
        					}
        				}
        			}
        		}
        		
        		
        		pagesTotal = tarjetasRepository.findByIdlocalidad_CodigoIn(localidades, pageConfig);
    		}
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (Tarjetas tarjeta : pagesTotal.getContent()) {	
				PageCard pageCard= new PageCard();
				pageCard.setId(tarjeta.getId());
				pageCard.setCodigo(tarjeta.getCodigo());
				pageCard.setExpiracion(new SimpleDateFormat("dd-MM-yyyy").format(tarjeta.getFechafin()));
				pageCard.setIdLocalidad(tarjeta.getIdlocalidad().getId());
				pageCard.setLocalidad(tarjeta.getIdlocalidad().getCodigo());
				pageCard.setEstado(tarjeta.getEstado().toString());
				Propietario propietario = propietarioRepository.findOne(tarjeta.getIdlocalidad().getPropietario());
				if(propietario != null){
					pageCard.setIdPropietario(propietario.getPropietariocabecera().getId());
					pageCard.setPropietario(propietario.getPropietariocabecera().getNombre());
				}
				data.add(pageCard);
			}
			paginas.setData(data);
		}catch(Exception e){
			logger.error("Error en la Ejecucion {}", e);
			status = "ERROR";
			message = "Error en la Ejecucion ";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@PostMapping(path = "/createCard", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> CreateCard(@RequestBody CreateCard request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio CreateCard");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Tarjeta Creada Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(request.getLocalidad().equals("") || request.getCodigo().equals("")){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		Usuario usuario = usuarioRepository.findOne(idUsuario);
    		Localidad localidad = localidadRepository.findByCodigo(request.getLocalidad());
    		
    		if(localidad == null){
    			status = "WARNING";
    			message = "Localidad no Existe ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		Tarjetas tarjeta = new Tarjetas();
    		tarjeta.setId(tarjetasRepository.getNextId() + 1);
    		tarjeta.setCodigo(request.getCodigo());
    		tarjeta.setFechafin(new SimpleDateFormat("yyyy-MM-dd").parse(request.getFecha()));
    		tarjeta.setEstado('A');
    		tarjeta.setIdlocalidad(localidad);
    		tarjetasRepository.save(tarjeta);
    		
    		Propietario propietario = propietarioRepository.findOne(localidad.getPropietario());
    		
    		Auditoria auditoria = new Auditoria();
    		auditoria.setId(auditoriaRepository.maxId() + 1);
    		auditoria.setFecha(new Date());
    		auditoria.setOpcionpadre("");
    		auditoria.setOpcionhija("");
    		auditoria.setAccion("Crear Tarjeta");
    		auditoria.setDetalle("Propietario: " + propietario.getPropietariocabecera().getNombre() + " Localidad: " + localidad.getCodigo() + " Codigo: " + request.getCodigo() + " Fecha: " + request.getFecha());
    		auditoria.setIdusuario(usuario);
    		auditoria.setJson(ow.writeValueAsString(request));
    		auditoriaRepository.save(auditoria);
    		
    		AccionesTarjeta acciones = new AccionesTarjeta();
    		acciones.setCodigo(accionesTarjetaRepository.maxId() + 1);
    		acciones.setFechaHora(new Date());
    		acciones.setEstado('E');
    		acciones.setAccion('A');
    		acciones.setIdPropietario(propietario.getPropietariocabecera().getIdentificacion());
    		acciones.setNombrePropietario(propietario.getPropietariocabecera().getNombre());
    		acciones.setNumeroTarjeta(Integer.parseInt(tarjeta.getCodigo()));
    		acciones.setNivelAcceso(utility.getNivelLocalidad(localidad.getCodigo()));
    		accionesTarjetaRepository.save(acciones);
    		
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Crear Tarjeta {}", e);
			status = "ERROR";
			message = "Error al Crear Tarjeta ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/updateCard", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> UpdateCard(@RequestBody UpdateCard request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio UpdateCard");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Tarjeta Actualizada Correctamente";
		String status ="SUCCESS";
		boolean cambio = false;
		try{
			watch = new StopWatch();
    		watch.start();
    		if(request.getLocalidad().equals("") || request.getCodigo().equals("") || request.getId() < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		Usuario usuario = usuarioRepository.findOne(idUsuario);
    		Localidad localidad = localidadRepository.findByCodigo(request.getLocalidad());
    		
    		if(localidad == null){
    			status = "WARNING";
    			message = "Localidad no Existe ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		Tarjetas tarjeta = tarjetasRepository.findOne(request.getId());
    		if(tarjeta == null){
    			status = "WARNING";
    			message = "Tarjeta no Existe ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		if(tarjeta.getEstado().equals('E')){
    			status = "WARNING";
    			message = "Tarjeta Eliminada No se puede Activar ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		if(!tarjeta.getEstado().equals(request.getEstado().charAt(0))){
    			cambio = true;
    		}
    		
    		tarjeta.setCodigo(request.getCodigo());
    		tarjeta.setFechafin(new SimpleDateFormat("yyyy-MM-dd").parse(request.getFecha()));
    		tarjeta.setEstado(request.getEstado().charAt(0));
    		tarjeta.setIdlocalidad(localidad);
    		tarjetasRepository.save(tarjeta);
    		
    		Propietario propietario = propietarioRepository.findOne(localidad.getPropietario());
    		
    		Auditoria auditoria = new Auditoria();
    		auditoria.setId(auditoriaRepository.maxId() + 1);
    		auditoria.setFecha(new Date());
    		auditoria.setOpcionpadre("");
    		auditoria.setOpcionhija("");
    		auditoria.setAccion("Actualizar Tarjeta");
    		auditoria.setDetalle("Propietario: " + propietario.getPropietariocabecera().getNombre() + " Localidad: " + localidad.getCodigo() + " Codigo: " + request.getCodigo() + " Fecha: " + request + " Estado: " + request.getEstado());
    		auditoria.setIdusuario(usuario);
    		auditoria.setJson(ow.writeValueAsString(request));
    		auditoriaRepository.save(auditoria);
    		
    		if(cambio){
    			AccionesTarjeta acciones = new AccionesTarjeta();
        		acciones.setCodigo(accionesTarjetaRepository.maxId() + 1);
        		acciones.setFechaHora(new Date());
        		acciones.setEstado('E');
        		if(request.getEstado().equals("A")){
        			acciones.setAccion('A');
        		}else{
        			acciones.setAccion('D');
        		}
        		acciones.setIdPropietario(propietario.getPropietariocabecera().getIdentificacion());
        		acciones.setNombrePropietario(propietario.getPropietariocabecera().getNombre());
        		acciones.setNumeroTarjeta(Integer.parseInt(tarjeta.getCodigo()));
        		acciones.setNivelAcceso(utility.getNivelLocalidad(localidad.getCodigo()));
        		accionesTarjetaRepository.save(acciones);
    		}
    		
    		
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Actualizar Tarjeta {}", e);
			status = "ERROR";
			message = "Error al Actualizar Tarjeta ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getSuscriptionsByOwner/{id}",produces = "application/json")
	public ResponseEntity<String> GetSuscriptionsByOwner(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetSuscriptionsByOwner");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		ResponseSuscriptionOwner response = new ResponseSuscriptionOwner();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		PropietarioCabecera propietario = propietarioCabeceraRepository.findOne(id);
    		if(propietario == null){
    			status = "WARNING";
    			message = "Propietario No Existe";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseSuscriptions(status, message, response, HttpStatus.OK.value(), null)), HttpStatus.OK);
    		}
    		List<Propietario> suscripciones = propietarioRepository.findByPropietariocabecera_Id(id);
    		List<SuscriptionsOwner> listSuscripciones = new ArrayList<>();
    		if(!suscripciones.isEmpty()){
    			for(Propietario suscripcion: suscripciones){
    				if(suscripcion.getEstado().equals('A')){
    					SuscriptionsOwner sus = new SuscriptionsOwner();
        				sus.setEstado(suscripcion.getEstado().toString());
        				sus.setIdPropietario(suscripcion.getId());
        				sus.setNombre(suscripcion.getSuscripcion().getNombre());
    					List<Localidad> localidades = localidadRepository.findByPropietario(suscripcion.getId());
    					List<String> lista = new ArrayList<>();
    					if(!localidades.isEmpty()){
    						for(Localidad localidad: localidades){
    							lista.add(localidad.getCodigo());
    						}
    					}
    					if(!lista.isEmpty()){
    						sus.setLocalidades(lista);
    					}
    					listSuscripciones.add(sus);
    				}
    				
    			}
    		}
    		response = utility.SetResponseSuscriptions(status, message, response, HttpStatus.OK.value(), listSuscripciones);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error an la Consulta {}", e);
			status = "ERROR";
			message = "Error an la Consulta ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseSuscriptions(status, message, response, HttpStatus.BAD_REQUEST.value(), null)), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@GetMapping(path = "/getDocumentsByOwnerCab", produces = "application/json")
	public PagesDocumentsOwner GetDocumentsByOwner(@RequestParam("idPropietario") Integer id, @RequestParam("estado") String estado, @RequestParam("page") Integer page, @RequestParam("size") Integer size, @RequestParam("desc") boolean desc) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetDocumentsByOwner");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesDocumentsOwner paginas = new PagesDocumentsOwner();
		List<DocumentsOwner> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			Sort.Order addOrder = utility.getOrderDocument(desc);
			if (addOrder != null)
				orderList.add(addOrder);
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(page - 1, size, sort);
    		List<Propietario> suscripciones = propietarioRepository.findByPropietariocabecera_Id(id);
    		List<Integer> listSuscripciones = new ArrayList<>();
    		if(!suscripciones.isEmpty()){
    			for(Propietario prop: suscripciones){
    				listSuscripciones.add(prop.getId());
    			}
    		}
    		List<String> localidades = new ArrayList<>();
    		if(!listSuscripciones.isEmpty()){
    			localidades = localidadRepository.findByPropietarioList(listSuscripciones);
    		}
    		logger.info("Lista Suscripciones: " + listSuscripciones + " Lista Localidades: " + localidades);
    		Page<DocumentoVenta> pagesTotal;
    		if(estado.equals("ALL")){
    			pagesTotal = documentoVentaRepository.findByLocalidadInAndIdpropietario_IdIn(localidades, listSuscripciones, pageConfig);
    		}else{
    			pagesTotal = documentoVentaRepository.findByLocalidadInAndEstadoAndIdpropietario_IdIn(localidades, estado.charAt(0), listSuscripciones, pageConfig);
    		}
			paginas.setTotalPages(pagesTotal.getTotalPages());
			paginas.setTotalElements(pagesTotal.getTotalElements());
			paginas.setSize(pagesTotal.getSize());
			for (DocumentoVenta documentos : pagesTotal.getContent()) {
				DocumentsOwner documento = new DocumentsOwner();
				documento.setIdDocumento(documentos.getId());
				documento.setEstado(documentos.getEstado().toString());
				documento.setFechaCreacion(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechacreacion()));
				documento.setFechaVencimiento(new SimpleDateFormat("dd-MM-yyyy").format(documentos.getFechavencimiento()));
				documento.setLocalidad(documentos.getLocalidad());
				documento.setNumero(documentos.getNumero());
				documento.setDeuda(new Double(df2.format(documentos.getSaldo())));
				documento.setValor(new Double(df2.format(documentos.getSubtotalsiniva())));
				data.add(documento);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error GetDocumentsByOwner {}", e);
			message = "Error al consultar los documentos";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@PutMapping(path = "/updateImageOwner", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> UpdateImageOwner(@RequestBody UpdateImage request, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio UpdateImageOwner");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		PropietarioCabecera propietario = new PropietarioCabecera();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Imagen del Propietario Actualizado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(request.getImagen().equals("") || request.getExtension().equals("") || request.getIdPropietarioCab() < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		propietario = propietarioCabeceraRepository.findOne(request.getIdPropietarioCab());
    		if(propietario == null){
    			status = "WARNING";
    			message = "Propietario no existe";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		propietario.setImagen(request.getImagen());
    		propietario.setExtimagen(request.getExtension());
    		propietarioCabeceraRepository.save(propietario);
    		
    		Usuario usuario = usuarioRepository.findOne(idUsuario);
    		Auditoria auditoria = new Auditoria();
    		auditoria.setId(auditoriaRepository.maxId() + 1);
    		auditoria.setFecha(new Date());
    		auditoria.setOpcionpadre("");
    		auditoria.setOpcionhija("");
    		auditoria.setAccion("Actualizar Imagen Propietario");
    		auditoria.setDetalle("Propietario: " + propietario.getNombre());
    		auditoria.setIdusuario(usuario);
    		auditoria.setJson(ow.writeValueAsString(request).substring(0,470));
    		auditoriaRepository.save(auditoria);
    		
    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Actualizar Imagen del Propietario {}", e);
			status = "ERROR";
			message = "Error al Actualizar Imagen del Propietario ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	/*@Transactional
	@PostMapping(path = "/getOwnersCollection", consumes = "application/json", produces = "application/json")
	public Pages GetOwnersCollection(@RequestBody PageQuery obj) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetOwnersCollection");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		Pages paginas = new Pages();
		List<ec.com.propietarios.modelRest.Page> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderDetail(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<Propietario> pagesTotal;
    		List<Integer> listGestion = new ArrayList<>();
			listGestion = cobranzasRepository.findByDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
    		if(obj.getSearch().getValue().equals("")){
    			if(!listGestion.isEmpty()){
    				pagesTotal = propietarioRepository.findByIdNotIn(listGestion, pageConfig);
    			}else{
    				pagesTotal = propietarioRepository.findAll(pageConfig);
    			}
    			
    		}else{
    			pagesTotal = utility.listaPaginasCobranza(obj.getSearch(), pageConfig, propietarioRepository, localidadRepository, listGestion);
    		}
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (Propietario propietario : pagesTotal.getContent()) {
				ec.com.propietarios.modelRest.Page pageRest = new ec.com.propietarios.modelRest.Page();
				pageRest.setId(propietario.getId());
				pageRest.setNombre(propietario.getNombre());
				pageRest.setDireccion(propietario.getDireccion());
				pageRest.setCorreo(propietario.getCorreo());
				pageRest.setTelefono(propietario.getTelefono());
				pageRest.setIdentificacion(propietario.getIdentificacion());
				pageRest.setTipoIdentificacion(propietario.getTipoidentificacion().toString());
				pageRest.setMovil(propietario.getMovil());
				pageRest.setSuscripcion(propietario.getSuscripcion().getNombre());
				pageRest.setIdSuscripcion(propietario.getSuscripcion().getId());
				pageRest.setEstado(propietario.getEstado().toString());
				
				List<Localidad> localidades = localidadRepository.findByPropietarioAndSuscripcion(propietario.getId(), propietario.getSuscripcion());
				if(localidades.size() > 0){
					StringBuilder str = new StringBuilder();
					for(Localidad localidad: localidades){
						str.append(localidad.getCodigo());
						str.append(", ");
					}
					String local = str.toString();
					local = local.substring(0, str.length() - 2);
					pageRest.setLocalidad(local);
				}
				
				data.add(pageRest);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error GetOwner {}", e);
			message = "Error al consultar los propietarios";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}*/
	
	@Transactional
	@PostMapping(path = "/getOwnersCollection", consumes = "application/json", produces = "application/json")
	public PagesCab GetOwnersCollection(@RequestBody PageQuery obj) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetOwnersCollection");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesCab paginas = new PagesCab();
		List<PageCab> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderDetail(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<PropietarioCabecera> pagesTotal;
    		List<Integer> listGestion = new ArrayList<>();
			listGestion = cobranzasRepository.findByDate("%" + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "%");
    		if(obj.getSearch().getValue().equals("")){
    			if(!listGestion.isEmpty()){
    				pagesTotal = propietarioCabeceraRepository.findByIdNotIn(listGestion, pageConfig);
    			}else{
    				pagesTotal = propietarioCabeceraRepository.findAll(pageConfig);
    			}
    			
    		}else{
    			if(!listGestion.isEmpty()){
    				pagesTotal = utility.listaPagCabCobranza(obj.getSearch(), pageConfig, propietarioCabeceraRepository, propietarioRepository, localidadRepository, listGestion);
    			}else{
    				pagesTotal = utility.listaPagCab(obj.getSearch(), pageConfig, propietarioCabeceraRepository, propietarioRepository, localidadRepository);
    			}
    			
    		}
			paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (PropietarioCabecera propietario : pagesTotal.getContent()) {
				PageCab pageRest = new PageCab();
				pageRest.setId(propietario.getId());
				pageRest.setNombre(propietario.getNombre());
				pageRest.setDireccion(propietario.getDireccion());
				pageRest.setCorreo(propietario.getCorreo());
				pageRest.setTelefono(propietario.getTelefono());
				pageRest.setIdentificacion(propietario.getIdentificacion());
				pageRest.setTipoIdentificacion(propietario.getTipoidentificacion().toString());
				pageRest.setMovil(propietario.getMovil());
				pageRest.setEstado(propietario.getEstado().toString());
				List<Integer> idPropietarios = new ArrayList<>();
				List<Propietario> propList = propietarioRepository.findByPropietariocabecera_Id(propietario.getId());
				if(!propList.isEmpty()){
					StringBuilder str = new StringBuilder();
					StringBuilder propiedades  = new StringBuilder();
					for(Propietario prop: propList){
						Integer idPropietario = prop.getId();
						idPropietarios.add(idPropietario);
						
						List<Localidad> localidades = localidadRepository.findByPropietarioAndSuscripcion(prop.getId(), prop.getSuscripcion());
						if(localidades.size() > 0){
							str.append(prop.getSuscripcion().getNombre());
							str.append(", ");
							
							StringBuilder lo = new StringBuilder();
							for(Localidad localidad: localidades){
								lo.append(localidad.getCodigo());
								lo.append(", ");
							}
							String local = lo.toString();
							//local = local.substring(0, lo.length() - 2);
							propiedades.append(local);
						}
						
						
					}
					String suscripciones = str.toString();
					if(suscripciones.length() > 0){
						suscripciones = suscripciones.substring(0, str.length() - 2);
						pageRest.setSuscripcion(suscripciones);
					}else{
						pageRest.setSuscripcion("");
					}
					
					if(propiedades != null && propiedades.toString().length() > 0){
						String prop = propiedades.toString();
						prop = prop.substring(0, prop.length() - 2);
						pageRest.setLocalidad(prop);
					}else{
						pageRest.setLocalidad("");
					}
					
					
				}
				if(!idPropietarios.isEmpty()){
					pageRest.setIdPropietarios(idPropietarios);
				}
				
				data.add(pageRest);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error GetOwnersCollection {}", e);
			message = "Error al consultar los propietarios";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@PostMapping(path = "/createRequest", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> CreateRequest(@RequestBody CreateRequest request) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio CreateRequest");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Solicitud Creada Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(request.getIdPropietario() < 1 || request.getSolicitud().equals("")){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		PropietarioCabecera propietario = propietarioCabeceraRepository.findOne(request.getIdPropietario());
    		if(propietario == null){
    			status = "WARNING";
    			message = "Propietario No Existe ";
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		Solicitudes solicitud = new Solicitudes();
    		solicitud.setId(solicitudesRepository.getNextId() + 1);
    		solicitud.setEstado('A');
    		solicitud.setFecha(new Date());
    		solicitud.setSolicitud(request.getSolicitud());
    		solicitud.setIdpropietario(propietario);
    		solicitudesRepository.save(solicitud);
    		response.setCode(HttpStatus.OK.value());
    		response.setMessage(message);
    		response.setStatus(status);
    		logger.info(message);
		}catch(Exception e){
			logger.error("Error al Crear Solicitud {}", e);
			status = "ERROR";
			message = "Error al Crear Solicitud ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PutMapping(path = "/updateRequest", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> UpdateRequest(@RequestBody UpdateRequest request) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio UpdateRequest");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Solicitud Actualizada Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(request.getIdSolicitud() < 1 || request.getSolicitud().equals("")){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		Solicitudes solicitud = solicitudesRepository.findOne(request.getIdSolicitud());
    		if(solicitud == null){
    			status = "WARNING";
    			message = "Solicitud No Existe ";
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		if(solicitud.getEstado().equals('C')){
    			status = "WARNING";
    			message = "Solicitud Ya Cerrada";
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		solicitud.setSolicitud(request.getSolicitud());
    		solicitudesRepository.save(solicitud);
    		response.setCode(HttpStatus.OK.value());
    		response.setMessage(message);
    		response.setStatus(status);
    		logger.info(message);
		}catch(Exception e){
			logger.error("Error al Actualizar Solicitud {}", e);
			status = "ERROR";
			message = "Error al Actualizar Solicitud ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@DeleteMapping(path = "/deleteRequest/{id}", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> DeleteRequest(@PathVariable("id") Integer id) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio DeleteRequest");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Solicitud Eliminada Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		Solicitudes solicitud = solicitudesRepository.findByIdAndEstado(id, 'A');
    		if(solicitud == null){
    			status = "WARNING";
    			message = "Solicitud ya está en revision";
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		solicitudesRepository.delete(solicitud);
    		response.setCode(HttpStatus.OK.value());
    		response.setMessage(message);
    		response.setStatus(status);
    		logger.info(message);
		}catch(Exception e){
			logger.error("Error al Eliminar Solicitud {}", e);
			status = "ERROR";
			message = "Error al Eliminar Solicitud ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@GetMapping(path = "/getRequest", produces = "application/json")
	public PagesSolicitudes GetRequest(@RequestParam("idPropietario") Integer id, @RequestParam("estado") String estado, @RequestParam("page") Integer page, @RequestParam("size") Integer size, @RequestParam("desc") boolean desc) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetRequest");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesSolicitudes paginas = new PagesSolicitudes();
		List<Solicitud> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
			ArrayList<Sort.Order> orderList = new ArrayList<>();
			Sort.Order addOrder = utility.getOrderRequest(desc);
			if (addOrder != null)
				orderList.add(addOrder);
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(page - 1, size, sort);
    		Page<Solicitudes> pagesTotal;
    		if(estado.equals("ALL")){
    			pagesTotal = solicitudesRepository.findByIdpropietario_Id(id, pageConfig);
    		}else{
    			pagesTotal = solicitudesRepository.findByEstadoAndIdpropietario_Id(estado.charAt(0), id, pageConfig);
    		}
			paginas.setTotalPages(pagesTotal.getTotalPages());
			paginas.setTotalElements(pagesTotal.getTotalElements());
			paginas.setSize(pagesTotal.getSize());
			for (Solicitudes solicitud : pagesTotal.getContent()) {
				Solicitud sol = new Solicitud();
				sol.setId(solicitud.getId());
				sol.setEstado(solicitud.getEstado());
				sol.setIdPropietario(solicitud.getIdpropietario().getId());
				sol.setSolicitud(solicitud.getSolicitud());
				sol.setFecha(new SimpleDateFormat("dd-MM-yyyy").format(solicitud.getFecha()));
				data.add(sol);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error en GetRequest {}", e);
			message = "Error en GetRequest";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	
	
	@Transactional
	@PostMapping(path = "/uploadvoucher", consumes = "application/json", produces = "application/json")
	public ResponseEntity<String> UploadVoucher(@RequestBody CreateVoucher request)
			throws JsonProcessingException, HttpMessageNotReadableException {
		logger.info("Inicio UploadVoucher");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message = "Comprobantes Cargados Correctamente";
		String status = "SUCCESS";
		try {
			watch = new StopWatch();
			watch.start();

			PropietarioCabecera propietario= propietarioCabeceraRepository.findOne(request.getIdPropietario());

			if (propietario == null) {
				status = "WARNING";
				message = "Propietario no Existe";
				logger.info(message);
				return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())),
						HttpStatus.OK);
			}
			
			ComprobantesPago comprobantesPago = new ComprobantesPago();
			comprobantesPago.setFecha(new Date());
			comprobantesPago.setEstado('A');
			comprobantesPago.setIdpropietariocabecera(propietario);
			if(request.getObservacion() != null){
				comprobantesPago.setObservacion(request.getObservacion());
			}
			if(request.getLocalidades() != null){
				comprobantesPago.setLocalidades(request.getLocalidades());
			}
			if(request.getComprobante1() != null){
				comprobantesPago.setComprobante1(request.getComprobante1());
			}
			if(request.getComprobante2() != null){
				comprobantesPago.setComprobante2(request.getComprobante2());
			}
			if(request.getComprobante3() != null){
				comprobantesPago.setComprobante3(request.getComprobante3());
			}
			if(request.getComprobante4() != null){
				comprobantesPago.setComprobante4(request.getComprobante4());
			}
			if(request.getComprobante5() != null){
				comprobantesPago.setComprobante5(request.getComprobante5());
			}
			comprobantesPago.setId(comprobantesPagoRepository.maxId() + 1);
			comprobantesPagoRepository.save(comprobantesPago);
			response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
		} catch (Exception e) {
			logger.error("Error al Cargar Comprobantes {}", e);
			status = "ERROR";
			message = "Error al Cargar Comprobantes ";
			return new ResponseEntity<>(
					ow.writeValueAsString(
							utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())),
					HttpStatus.BAD_REQUEST);
		} finally {
			Long time = (long) 0;
			if (watch != null) {
				watch.stop();
				time = watch.getTotalTimeMillis();
			}

			logger.info("[Status:" + status + "] [Message:" + message + "] [TotalTime:" + time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PostMapping(path = "/getVoucherPage/{estado}", consumes = "application/json", produces = "application/json")
	public PagesVoucher GetVoucherPage(@RequestBody PageQuery obj, @PathVariable("estado") String estado) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetVoucherPage");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesVoucher paginas = new PagesVoucher();
		List<Voucher> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderCase(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<ComprobantesPago> pagesTotal;
    		if(estado.equals("ALL")){
    			if(obj.getSearch().getValue().equals("")){
    				pagesTotal = comprobantesPagoRepository.findAll(pageConfig);
    			}else{
    				pagesTotal = utility.listaPaginasComprobantes(obj.getSearch(), pageConfig, comprobantesPagoRepository, propietarioRepository, localidadRepository, estado);
    			}
    			
    		}else{
    			if(obj.getSearch().getValue().equals("")){
    				pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue());
    				pagesTotal = comprobantesPagoRepository.findByEstado(estado.charAt(0), pageConfig);
    			}else{
    				pagesTotal = utility.listaPaginasComprobantes(obj.getSearch(), pageConfig, comprobantesPagoRepository, propietarioRepository, localidadRepository, estado);
    			}
    		}
    		if(pagesTotal == null){
    			paginas.setDraw(obj.getDraw());
    			paginas.setRecordsFiltered(new Long(0));
    			paginas.setRecordsTotal(new Long(0));
    			paginas.setData(data);
    			return paginas;
    		}
    		paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (ComprobantesPago comprobante : pagesTotal.getContent()) {
				Voucher vou = new Voucher();
				vou.setId(comprobante.getId());
				vou.setFecha(new SimpleDateFormat("dd-MM-yyyy").format(comprobante.getFecha()));
				vou.setEstado(comprobante.getEstado().toString());
				if(comprobante.getComprobante1() != null){
					vou.setComprobante1(comprobante.getComprobante1());
				}
				if(comprobante.getComprobante2() != null){
					vou.setComprobante2(comprobante.getComprobante2());
				}
				if(comprobante.getComprobante3() != null){
					vou.setComprobante3(comprobante.getComprobante3());
				}
				if(comprobante.getComprobante4() != null){
					vou.setComprobante4(comprobante.getComprobante4());
				}
				if(comprobante.getComprobante5() != null){
					vou.setComprobante5(comprobante.getComprobante5());
				}
				if(comprobante.getObservacion() != null){
					vou.setObservacion(comprobante.getObservacion());
				}
				List<Usuario> usuarios = (List<Usuario>) comprobante.getUsuarioCollection();
				if(usuarios!=null && !usuarios.isEmpty()){
					vou.setIdUsuario(usuarios.get(0).getId());
					vou.setUsuario(usuarios.get(0).getNombre());
				}
				vou.setPropietario(comprobante.getIdpropietariocabecera().getNombre());
				vou.setIdPropietario(comprobante.getIdpropietariocabecera().getId());
				vou.setLocalidades(comprobante.getLocalidades());
				data.add(vou);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error en GetVoucherPage {}", e);
			message = "Error en GetVoucherPage";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@PutMapping(path = "/assignVoucher/{idVoucher}", produces = "application/json")
	public ResponseEntity<String> AssignVoucher(@PathVariable("idVoucher") Integer idVoucher, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio AssignVoucher");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ComprobantesPago comprobante = new ComprobantesPago();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Usuario Asignado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(idVoucher < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		comprobante = comprobantesPagoRepository.findOne(idVoucher);
    		if(comprobante != null){
    			if(!comprobante.getEstado().equals('A')){
    				status = "WARNING";
        			message = "Comprobante ya ha sido asignado";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    			List<Usuario> usuarios = new ArrayList<>();
    			usuarios = (List<Usuario>) comprobante.getUsuarioCollection();
    			Usuario usuario = usuarioRepository.findOne(idUsuario);
    			usuarios.add(usuario);
    			comprobante.setUsuarioCollection(usuarios);
    			comprobante.setEstado('R');
    			comprobantesPagoRepository.save(comprobante);
    		}else{
    			status = "ERROR";
    			message = "No Existe el Comprobante";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}

    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Asignar Comprobante {}", e);
			status = "ERROR";
			message = "Error al Asignar Comprobante ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/closeVoucher/{idVoucher}", produces = "application/json")
	public ResponseEntity<String> CloseVoucher(@PathVariable("idVoucher") Integer idVoucher, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio CloseVoucher");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		ComprobantesPago comprobante = new ComprobantesPago();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Comprobante Cerrada Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(idVoucher < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		comprobante = comprobantesPagoRepository.findOne(idVoucher);
    		if(comprobante != null){
    			boolean existe=false;
    			List<Usuario> usuarios = (List<Usuario>) comprobante.getUsuarioCollection();
    			for(Usuario usuario: usuarios){
    				if(usuario.getId() == idUsuario){
    					existe =true;
    					break;
    				}
    			}
    			
    			if(comprobante.getEstado().equals('A')){
    				status = "WARNING";
        			message = "Comprobante No ha sido asignada";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    			
    			if(!existe){
    				status = "WARNING";
        			message = "Comprobante Solo puede ser Cerrado por el Usuario Asignado";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    			
    			if(comprobante.getEstado().equals('C')){
    				status = "WARNING";
        			message = "Comprobante ya ha sido cerrada";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    			comprobante.setEstado('C');
    			comprobantesPagoRepository.save(comprobante);
    		}else{
    			status = "ERROR";
    			message = "No Existe el Comprobante";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}

    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Cerrar Comprobante {}", e);
			status = "ERROR";
			message = "Error al Cerrar Comprobante ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@GetMapping(path = "/getVoucher/{idVoucher}", produces = "application/json")
	public ResponseEntity<String> GetVoucher(@PathVariable("idVoucher") Integer idVoucher, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetVoucher");
		StopWatch watch = null;
		ResponseVoucher response = new ResponseVoucher();
		ComprobantesPago comprobante = new ComprobantesPago();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Consulta Realizada Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(idVoucher < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseVoucher(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		comprobante = comprobantesPagoRepository.findOne(idVoucher);
    		if(comprobante != null){
    			Voucher vou = new Voucher();
				vou.setId(comprobante.getId());
				vou.setFecha(new SimpleDateFormat("dd-MM-yyyy").format(comprobante.getFecha()));
				vou.setEstado(comprobante.getEstado().toString());
				if(comprobante.getComprobante1() != null){
					vou.setComprobante1(comprobante.getComprobante1());
				}
				if(comprobante.getComprobante2() != null){
					vou.setComprobante2(comprobante.getComprobante2());
				}
				if(comprobante.getComprobante3() != null){
					vou.setComprobante3(comprobante.getComprobante3());
				}
				if(comprobante.getComprobante4() != null){
					vou.setComprobante4(comprobante.getComprobante4());
				}
				if(comprobante.getComprobante5() != null){
					vou.setComprobante5(comprobante.getComprobante5());
				}
				if(comprobante.getObservacion() != null){
					vou.setObservacion(comprobante.getObservacion());
				}
				List<Usuario> usuarios = (List<Usuario>) comprobante.getUsuarioCollection();
				if(usuarios!=null && !usuarios.isEmpty()){
					vou.setIdUsuario(usuarios.get(0).getId());
					vou.setUsuario(usuarios.get(0).getNombre());
				}
				vou.setPropietario(comprobante.getIdpropietariocabecera().getNombre());
				vou.setIdPropietario(comprobante.getIdpropietariocabecera().getId());
				vou.setLocalidades(comprobante.getLocalidades());
				response.setResponse(vou);
    		}else{
    			status = "ERROR";
    			message = "No Existe el Comprobante";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseVoucher(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}

    		response = utility.SetResponseVoucher(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Consultar Comprobante {}", e);
			status = "ERROR";
			message = "Error al Consultar Comprobante ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseVoucher(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PostMapping(path = "/getRequestPage/{estado}", consumes = "application/json", produces = "application/json")
	public PagesSolicitudes2 GetRequestPage(@RequestBody PageQuery obj, @PathVariable("estado") String estado) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetRequestPage");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesSolicitudes2 paginas = new PagesSolicitudes2();
		List<Solicitud2> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderCase(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<Solicitudes> pagesTotal;
    		if(estado.equals("ALL")){
    			if(obj.getSearch().getValue().equals("")){
    				pagesTotal = solicitudesRepository.findAll(pageConfig);
    			}else{
    				pagesTotal = utility.listaPaginasSolicitudes(obj.getSearch(), pageConfig, solicitudesRepository, propietarioRepository, localidadRepository, estado);
    			}
    			
    		}else{
    			if(obj.getSearch().getValue().equals("")){
    				pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue());
    				pagesTotal = solicitudesRepository.findByEstado(estado.charAt(0), pageConfig);
    			}else{
    				pagesTotal = utility.listaPaginasSolicitudes(obj.getSearch(), pageConfig, solicitudesRepository, propietarioRepository, localidadRepository, estado);
    			}
    		}
    		if(pagesTotal == null){
    			paginas.setDraw(obj.getDraw());
    			paginas.setRecordsFiltered(new Long(0));
    			paginas.setRecordsTotal(new Long(0));
    			paginas.setData(data);
    			return paginas;
    		}
    		paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (Solicitudes solicitud : pagesTotal.getContent()) {
				Solicitud2 sol = new Solicitud2();
				sol.setId(solicitud.getId());
				sol.setEstado(solicitud.getEstado());
				sol.setIdPropietario(solicitud.getIdpropietario().getId());
				sol.setPropietario(solicitud.getIdpropietario().getNombre());
				sol.setSolicitud(solicitud.getSolicitud());
				sol.setFecha(new SimpleDateFormat("dd-MM-yyyy").format(solicitud.getFecha()));
				List<Usuario> usuarios = (List<Usuario>) solicitud.getUsuarioCollection();
				if(usuarios!=null && !usuarios.isEmpty()){
					sol.setIdUsuario(usuarios.get(0).getId());
					sol.setUsuario(usuarios.get(0).getNombre());
				}
				data.add(sol);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error en GetRequestPage {}", e);
			message = "Error en GetRequestPage";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@PutMapping(path = "/assignRequest/{idRequest}", produces = "application/json")
	public ResponseEntity<String> AssignRequest(@PathVariable("idRequest") Integer idRequest, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio AssignRequest");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		Solicitudes solicitud = new Solicitudes();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Solicitud Asignado Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(idRequest < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		solicitud = solicitudesRepository.findOne(idRequest);
    		if(solicitud != null){
    			if(!solicitud.getEstado().equals('A')){
    				status = "WARNING";
        			message = "Solicitud ya ha sido asignado";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    			List<Usuario> usuarios = new ArrayList<>();
    			usuarios = (List<Usuario>) solicitud.getUsuarioCollection();
    			Usuario usuario = usuarioRepository.findOne(idUsuario);
    			usuarios.add(usuario);
    			solicitud.setUsuarioCollection(usuarios);
    			solicitud.setEstado('R');
    			solicitudesRepository.save(solicitud);
    		}else{
    			status = "ERROR";
    			message = "No Existe la Solicitud";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}

    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Asignar Solicitud {}", e);
			status = "ERROR";
			message = "Error al Asignar Solicitud ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PutMapping(path = "/closeRequest/{idRequest}", produces = "application/json")
	public ResponseEntity<String> CloseRequest(@PathVariable("idRequest") Integer idRequest, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio CloseRequest");
		StopWatch watch = null;
		ResponseGeneric response = new ResponseGeneric();
		Solicitudes solicitud = new Solicitudes();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Solicitud Cerrada Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(idRequest < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		solicitud = solicitudesRepository.findOne(idRequest);
    		if(solicitud != null){
    			boolean existe=false;
    			List<Usuario> usuarios = (List<Usuario>) solicitud.getUsuarioCollection();
    			for(Usuario usuario: usuarios){
    				if(usuario.getId() == idUsuario){
    					existe =true;
    					break;
    				}
    			}
    			
    			if(solicitud.getEstado().equals('A')){
    				status = "WARNING";
        			message = "Solicitud No ha sido asignada";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    			
    			if(!existe){
    				status = "WARNING";
        			message = "Solicitud Solo puede ser Cerrada por el Usuario Asignado";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    			
    			if(solicitud.getEstado().equals('C')){
    				status = "WARNING";
        			message = "Solicitud ya ha sido cerrada";
        			logger.info(message);
        			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    			}
    			solicitud.setEstado('C');
    			solicitudesRepository.save(solicitud);
    		}else{
    			status = "ERROR";
    			message = "No Existe la Solicitud";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}

    		response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Cerrar Solicitud {}", e);
			status = "ERROR";
			message = "Error al Cerrar Solicitud ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@PostMapping(path = "/createAdverstising", consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.MULTIPART_FORM_DATA_VALUE} ,produces = "application/json")
	public ResponseEntity<String> CreateAdvertising(@RequestPart("file") MultipartFile file, @RequestPart("titulo") String titulo, @RequestPart("descripcion") String descripcion , @RequestHeader("idUsuario") Integer idUsuario)
			throws JsonProcessingException, HttpMessageNotReadableException {

		logger.info("Inicio CreateAdverstising");
		ResponseGeneric response = new ResponseGeneric();
		String message = "Creación Realizada Correctamente";
		String status = "SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		StopWatch watch = null;
		try {

			watch = new StopWatch();
			watch.start();
			
			if(file.isEmpty() || titulo.equals("") || descripcion.equals("")){
				status = "WARNING";
    			message = "Por favor llenar todos los campos";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
			}
			
			String extension = FilenameUtils.getExtension(file.getOriginalFilename());
			
			/*InputStream initialStream = file.getInputStream();
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			BufferedImage originalImage = ImageIO.read(initialStream);
			int type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

			BufferedImage resizedImage = new BufferedImage(640, 640, type);
			Graphics2D g = resizedImage.createGraphics();
			g.drawImage(originalImage, 0, 0, 1000, 1000, null);
			g.dispose();
			g.setComposite(AlphaComposite.Src);
			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

			ImageIO.write(resizedImage, extension, baos);

			byte[] fileContent = baos.toByteArray();
			String encodedString = Base64.getEncoder().encodeToString(fileContent);*/
			
			byte[] fileContent = file.getBytes();
            String encodedString = Base64.getEncoder().encodeToString(fileContent);
			
			Publicidad publicidad = new Publicidad();
			publicidad.setTitulo(titulo);
			publicidad.setDescripcion(descripcion);
			publicidad.setId(publicidadRepository.getNextId() + 1);
			publicidad.setFecha(new Date());
			publicidad.setImagen(encodedString);
			publicidad.setEstado('I');
			publicidad.setExtimagen(extension);
			publicidadRepository.save(publicidad);
			
			Usuario usuario = usuarioRepository.findOne(idUsuario);
    		Auditoria auditoria = new Auditoria();
    		auditoria.setId(auditoriaRepository.maxId() + 1);
    		auditoria.setFecha(new Date());
    		auditoria.setOpcionpadre("");
    		auditoria.setOpcionhija("");
    		auditoria.setAccion("Crear Publicidad");
    		auditoria.setDetalle("Título: " + titulo + " Descripción: " + descripcion);
    		auditoria.setIdusuario(usuario);
    		auditoria.setJson("");
    		auditoriaRepository.save(auditoria);
    		
			
			response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			
		} catch (Exception e) {
			logger.error("Error al guardar publicidad", e);
			status = "ERROR";
			message = "Error al guardar publicidad";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
			
		}

		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PostMapping(path = "/getAdverstisingPage", consumes = "application/json", produces = "application/json")
	public PagesPublicidad GetAdverstisingPage(@RequestBody PageQuery obj) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetAdverstisingPage");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesPublicidad paginas = new PagesPublicidad();
		List<Adverstising> data = new ArrayList<>();
		StopWatch watch = null;
		try{
			watch = new StopWatch();
    		watch.start();
    		ArrayList<Sort.Order> orderList = new ArrayList<>();
			for (int i = 0; i < obj.getOrder().size(); i++) {
				Sort.Order addOrder = utility.getOrderCase(obj.getOrder().get(i));
				if (addOrder != null)
					orderList.add(addOrder);
			}
			Sort sort = new Sort(orderList);
    		Pageable pageConfig = new PageRequest(obj.getPageIndex().intValue() - 1, obj.getLength().intValue(), sort);
    		Page<Publicidad> pagesTotal;
    		pagesTotal = publicidadRepository.findAll(pageConfig);
    		if(pagesTotal == null){
    			paginas.setDraw(obj.getDraw());
    			paginas.setRecordsFiltered(new Long(0));
    			paginas.setRecordsTotal(new Long(0));
    			paginas.setData(data);
    			return paginas;
    		}
    		paginas.setDraw(obj.getDraw());
			paginas.setRecordsFiltered(Long.valueOf(pagesTotal.getTotalElements()));
			paginas.setRecordsTotal(Long.valueOf(pagesTotal.getTotalElements()));
			for (Publicidad publicidad : pagesTotal.getContent()) {
				Adverstising adv = new Adverstising();
				adv.setId(publicidad.getId());
				adv.setTitulo(publicidad.getTitulo());
				adv.setDescripcion(publicidad.getDescripcion());
				adv.setImagen(publicidad.getImagen());
				adv.setFecha(new SimpleDateFormat("dd-MM-yyyy").format(publicidad.getFecha()));
				adv.setEstado(publicidad.getEstado().toString());
				adv.setExtension(publicidad.getExtimagen());
				data.add(adv);
			}
			paginas.setData(data);
			logger.info(message);
		}catch(Exception e){
			logger.error("Error en GetAdverstisingPage {}", e);
			message = "Error en GetAdverstisingPage";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return paginas;
	}
	
	@Transactional
	@GetMapping(path = "/getAdverstising/{id}", produces = "application/json")
	public ResponseEntity<String> GetAdverstising(@PathVariable("id") Integer id, @RequestHeader("idUsuario") Integer idUsuario) throws JsonProcessingException, HttpMessageNotReadableException  {
		logger.info("Inicio GetAdverstising");
		StopWatch watch = null;
		ResponseAdverstising response = new ResponseAdverstising();
		Publicidad publicidad = new Publicidad();
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String message="Consulta Realizada Correctamente";
		String status ="SUCCESS";
		try{
			watch = new StopWatch();
    		watch.start();
    		if(id < 1){
    			status = "WARNING";
    			message = "Por favor llene todos los campos ";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseAdverstising(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}
    		
    		publicidad = publicidadRepository.findOne(id);
    		if(publicidad != null){
    			Adverstising adv = new Adverstising();
				adv.setId(publicidad.getId());
				adv.setFecha(new SimpleDateFormat("dd-MM-yyyy").format(publicidad.getFecha()));
				adv.setTitulo(publicidad.getTitulo());
				adv.setDescripcion(publicidad.getDescripcion());
				adv.setImagen(publicidad.getImagen());
				adv.setEstado(publicidad.getEstado().toString());
				adv.setExtension(publicidad.getExtimagen());
				response.setResponse(adv);
    		}else{
    			status = "ERROR";
    			message = "No Existe la Publicidad";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseAdverstising(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
    		}

    		response = utility.SetResponseAdverstising(status, message, response, HttpStatus.OK.value());
			logger.info(message);
		}catch(Exception e){
			logger.error("Error al Consultar Comprobante {}", e);
			status = "ERROR";
			message = "Error al Consultar Comprobante ";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponseAdverstising(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PutMapping(path = "/updateAdverstising", consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.MULTIPART_FORM_DATA_VALUE} ,produces = "application/json")
	public ResponseEntity<String> UpdateAdverstising(@RequestPart("file") MultipartFile file, @RequestPart("id") String id, @RequestPart("titulo") String titulo, @RequestPart("descripcion") String descripcion , @RequestHeader("idUsuario") Integer idUsuario)
			throws JsonProcessingException, HttpMessageNotReadableException {

		logger.info("Inicio UpdateAdverstising");
		ResponseGeneric response = new ResponseGeneric();
		String message = "Actualización Realizada Correctamente";
		String status = "SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		StopWatch watch = null;
		try {

			watch = new StopWatch();
			watch.start();
			
			if(file.isEmpty() || titulo.equals("") || descripcion.equals("")){
				status = "WARNING";
    			message = "Por favor llenar todos los campos";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
			}
			
			String extension = FilenameUtils.getExtension(file.getOriginalFilename());
			
			/*InputStream initialStream = file.getInputStream();
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			BufferedImage originalImage = ImageIO.read(initialStream);
			int type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

			BufferedImage resizedImage = new BufferedImage(640, 640, type);
			Graphics2D g = resizedImage.createGraphics();
			g.drawImage(originalImage, 0, 0, 1000, 1000, null);
			g.dispose();
			g.setComposite(AlphaComposite.Src);
			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

			ImageIO.write(resizedImage, extension, baos);

			byte[] fileContent = baos.toByteArray();
			String encodedString = Base64.getEncoder().encodeToString(fileContent);*/
			
			byte[] fileContent = file.getBytes();
            String encodedString = Base64.getEncoder().encodeToString(fileContent);
			
			Publicidad publicidad = new Publicidad();
			publicidad = publicidadRepository.findOne(Integer.parseInt(id));
			if(publicidad == null){
				status = "WARNING";
    			message = "Publicidad no existe";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
			}
			
			publicidad.setTitulo(titulo);
			publicidad.setDescripcion(descripcion);
			publicidad.setFecha(new Date());
			publicidad.setImagen(encodedString);
			publicidad.setExtimagen(extension);
			publicidadRepository.save(publicidad);
			
			Usuario usuario = usuarioRepository.findOne(idUsuario);
    		Auditoria auditoria = new Auditoria();
    		auditoria.setId(auditoriaRepository.maxId() + 1);
    		auditoria.setFecha(new Date());
    		auditoria.setOpcionpadre("");
    		auditoria.setOpcionhija("");
    		auditoria.setAccion("Actualizar Publicidad");
    		auditoria.setDetalle("Título: " + titulo + " Descripción: " + descripcion);
    		auditoria.setIdusuario(usuario);
    		auditoria.setJson("");
    		auditoriaRepository.save(auditoria);
    		
			
			response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			
		} catch (Exception e) {
			logger.error("Error al actualizar publicidad", e);
			status = "ERROR";
			message = "Error al actualizar publicidad";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
			
		}

		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	
	@Transactional
	@PutMapping(path = "/switchAdverstising/{idAdverstising}",produces = "application/json")
	public ResponseEntity<String> SwitchAdverstising(@PathVariable("idAdverstising") Integer idAdverstising, @RequestHeader("idUsuario") Integer idUsuario)
			throws JsonProcessingException, HttpMessageNotReadableException {

		logger.info("Inicio SwitchAdverstising");
		ResponseGeneric response = new ResponseGeneric();
		String message = "Cambio Realizado Correctamente";
		String status = "SUCCESS";
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		StopWatch watch = null;
		String estadoAnterior = "";
		try {

			watch = new StopWatch();
			watch.start();
			
			if(idAdverstising < 1){
				status = "WARNING";
    			message = "Por favor llenar todos los campos";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
			}
			
			
			Publicidad publicidad = new Publicidad();
			publicidad = publicidadRepository.findOne(idAdverstising);
			
			if(publicidad == null){
				status = "WARNING";
    			message = "Publicidad no existe";
    			logger.info(message);
    			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.OK.value())), HttpStatus.OK);
			}
			if(publicidad.getEstado().equals('I')){
				estadoAnterior = "I";
				publicidad.setEstado('A');
			}else{
				estadoAnterior = "A";
				publicidad.setEstado('I');
			}
			
			publicidadRepository.save(publicidad);
			
			Usuario usuario = usuarioRepository.findOne(idUsuario);
    		Auditoria auditoria = new Auditoria();
    		auditoria.setId(auditoriaRepository.maxId() + 1);
    		auditoria.setFecha(new Date());
    		auditoria.setOpcionpadre("");
    		auditoria.setOpcionhija("");
    		auditoria.setAccion("Actualizar Estado Publicidad");
    		auditoria.setDetalle("Estado Anterior: " + estadoAnterior + " Estado Nuevo: " + publicidad.getEstado());
    		auditoria.setIdusuario(usuario);
    		auditoria.setJson("");
    		auditoriaRepository.save(auditoria);
    		
			
			response = utility.SetResponse(status, message, response, HttpStatus.OK.value());
			
		} catch (Exception e) {
			logger.error("Error al cambiar estado publicidad", e);
			status = "ERROR";
			message = "Error al cambiar estado publicidad";
			return new ResponseEntity<>(ow.writeValueAsString(utility.SetResponse(status, message, response, HttpStatus.BAD_REQUEST.value())), HttpStatus.BAD_REQUEST);
			
		}

		return new ResponseEntity<>(ow.writeValueAsString(response), HttpStatus.OK);
	}
	
	@Transactional
	@GetMapping(path = "/getAdverstisingActivePage", produces = "application/json")
	public PagesPublicidad2 GetAdverstisingActivePage(@RequestParam("page") Integer page, @RequestParam("size") Integer size) throws JsonProcessingException, HttpMessageNotReadableException{
		logger.info("Inicio GetAdverstisingActive");
		String message="Consulta realizada Correctamente";
		String status ="SUCCESS";
		PagesPublicidad2 paginas = new PagesPublicidad2();
		List<Adverstising> data = new ArrayList<>();
		StopWatch watch = null;
		
		try {
			
			Pageable pageConfig  = new PageRequest(page-1,size, Direction.DESC,"fecha");
			
			Page<Publicidad> pageTotal = publicidadRepository.findAllByEstado('A', pageConfig);
			
			if(pageTotal == null) {
				paginas.setTotalPages(pageTotal.getTotalPages());
				paginas.setSize(pageTotal.getSize());
				paginas.setTotalElements(pageTotal.getTotalElements());
			}
			
			
			
		}catch(Exception e){
			logger.error("Error en GetAdverstisingActivePage {}", e);
			message = "Error en GetAdverstisingActivePage";
		}finally{
			Long time=(long) 0; 
			if(watch!= null){
				watch.stop();
				time = watch.getTotalTimeMillis();
			}
			logger.info("[Status:" + status + "] [Message:" + message +"] [TotalTime:"+ time + "ms]");
		}
		
		return paginas;
		
	}
}
